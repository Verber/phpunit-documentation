<?xml version="1.0" encoding="utf-8" ?>

<chapter id="fixtures">
  <title>フィクスチャ</title>

  <caution>
    <para>
      このドキュメントは、すでにサポートが終了したバージョンの PHPUnit に関するものです。
    </para>

    <para>
      最新版の PHPUnit のドキュメントは
      <ulink url="../../current/ja/index.html">こちら</ulink>にあります。
    </para>
  </caution>

  <para>
    <indexterm><primary>Fixture</primary></indexterm>

    テストを記述する際にいちばん時間を食うのは、テストを開始するための事前設定と
    テスト終了後の後始末の処理を書くことです。この事前設定は、テストの
    <emphasis>フィクスチャ</emphasis> と呼ばれます。
  </para>

  <para>
    <xref linkend="writing-tests-for-phpunit.examples.ArrayTest.php" />
    では、フィクスチャは
    <literal>$fixture</literal> という変数に格納された配列だけでした。
    しかし、たいていの場合はフィクスチャはこれより複雑なものとなり、
    それを準備するにはかなりの量のコードが必要です。本来のテストの内容が、
    フィクスチャを設定するためのコードの中に埋もれてしまうことになります。
    この問題は、複数のテストで同じようなフィクスチャを設定する場合により顕著になります。
    テストフレームワークの助けがなければ、
    個々のテストのなかで同じような準備コードを繰り返し書くはめになってしまいます。
  </para>

  <para>
    <indexterm><primary>Template Method (テンプレートメソッド)</primary></indexterm>
    <indexterm><primary>setUp()</primary></indexterm>
    <indexterm><primary>tearDown()</primary></indexterm>

    PHPUnit は、準備用のコードの共有をサポートしています。
    各テストメソッドが実行される前に、<literal>setUp()</literal>
    という名前のテンプレートメソッドが実行されます。<literal>setUp()</literal>
    は、テスト対象のオブジェクトを生成するような処理に使用します。
    テストメソッドの実行が終了すると、それが成功したか否かにかかわらず、
    <literal>tearDown()</literal> という名前の別のテンプレートメソッドが実行されます。
    <literal>tearDown()</literal> では、テスト対象のオブジェクトの後始末などを行います。
  </para>

  <para>
    それでは、<literal>setUp()</literal> を使用してコードの重複を排除するように
    <xref linkend="writing-tests-for-phpunit.examples.ArrayTest.php" />
    を書き換えてみましょう。
    まず最初にインスタンス変数 <literal>$fixture</literal> を宣言し、
    メソッド内のローカル変数ではなくこちらを使用するようにします。
    そして、<literal>array</literal> フィクスチャの生成処理を
    <literal>setUp()</literal> メソッドに移動します。最後に、
    テストメソッド内で重複しているコードを取り除き、
    新しく作成したインスタンス変数を使用するようにします。つまり、
    <literal>assertEquals()</literal> で使用しているローカル変数
    <literal>$fixture</literal> を、<literal>$this-&gt;fixture</literal>
    に置き換えます。
  </para>

  <example id="fixtures.examples.ArrayTest.php">
    <title>setUp() を使用して Array フィクスチャを作成する</title>
    <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

class ArrayTest extends PHPUnit_Framework_TestCase
{
    protected $fixture;

    protected function setUp()
    {
        // Array フィクスチャを作成します。
        $this->fixture = array();
    }

    public function testNewArrayIsEmpty()
    {
        // Array フィクスチャのサイズは 0 のはずです。
        $this->assertEquals(0, sizeof($this->fixture));
    }

    public function testArrayContainsAnElement()
    {
        // Array フィクスチャに要素を追加します。
        $this->fixture[] = 'Element';

        // Array フィクスチャのサイズは 1 のはずです。
        $this->assertEquals(1, sizeof($this->fixture));
    }
}
?>]]></programlisting>
  </example>

  <para>
    各テストメソッドが実行されるたびに、<literal>setUp()</literal>
    および <literal>tearDown()</literal> が一度ずつコールされます。
    「テストケース内の全テストメソッドについて一度だけコールするように
    したほうがよいのではないか」とお考えになるかもしれませんが、
    そのようにすると各テストを互いに独立した状態にすることが難しくなります。
  </para>

  <para>
    テストメソッドごとに <literal>setUp()</literal> および
    <literal>tearDown()</literal> が一度ずつ実行されるだけでなく、
    テストメソッドごとに、新しいテストケースクラスのインスタンスが作成されます
    (<xref linkend="implementation" /> を参照ください)。
  </para>

  <section id="fixtures.more-setup-than-teardown">
    <title>tearDown() よりも setUp()</title>

    <para>
      <literal>setUp()</literal> と <literal>tearDown()</literal>
      は理屈上では対称的になるはずですが、実際にはそうではありません。実際には、
      <literal>tearDown()</literal> を実装する必要があるのは <literal>setUp()</literal>
      で外部リソース (ファイルやソケットなど) を割り当てた場合のみです。もし
      <literal>setUp()</literal> で単に PHP オブジェクトを作成しただけの場合は、
      一般には <literal>tearDown()</literal> は必要ありません。しかし、もし
      <literal>setUp()</literal> で大量のオブジェクトを作成した場合には、
      それらの後始末をするために <literal>tearDown()</literal> で変数を
      <literal>unset()</literal> したくなることもあるでしょう。
      テストケースオブジェクト自体のガベージコレクションにはあまり意味がありません。
    </para>
  </section>

  <section id="fixtures.variations">
    <title>バリエーション</title>

    <para>
      ふたつのテストがあって、それぞれの setup がほんの少しだけ違う場合にはどうなるでしょう?
      このような場合は、二種類の可能性が考えられます。
    </para>

    <itemizedlist>
      <listitem>
        <para>
          もし <literal>setUp()</literal> の違いがごくわずかなものなら、
          その違う部分を <literal>setUp()</literal>
          からテストメソッドのほうに移動させます。
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>setUp()</literal> の違いが大きければ、
          テストケースクラスを別に分ける必要があります。それぞれのクラスには、
          setup の違いを表す名前をつけます。
        </para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="fixtures.suite-level-setup">
    <title>スイートレベルの設定</title>

    <para>
      <indexterm><primary>PHPUnit_Extensions_TestSetup</primary></indexterm>

      PHPUnit には、スイートレベルでの設定をするための便利な方法はありません。
      複数のテストの間でフィクスチャを共有したいなんてことは、通常はめったにないはずです。
      しかし、設計上の問題などでどうしても
      フィクスチャを共有しなければならないこともあるでしょう。
    </para>

    <para>
      複数のテスト間で共有する意味のあるフィクスチャの例として意味のあるものといえば、
      データベースとの接続でしょう。テストのたびに新しいデータベース接続を毎回作成するのではなく、
      最初にログインした状態を再利用するということです。こうすることで、
      テストの実行時間を短縮できます。これを行うには、データベースに関するテストを
      <literal>DatabaseTests</literal> という名前のクラスに書き、デコレータ
      (decorator) オブジェクト <literal>TestSetup</literal>
      でテストスイートをラップします。オーバーライドした <literal>setUp()</literal>
      でデータベース接続をオープンし、 <literal>tearDown()</literal>
      で接続を閉じるようにします。この例を
      <xref linkend="fixtures.suite-level-setup.examples.DatabaseTestSetup.php" />
      に示します。<literal>DatabaseTestSetup</literal> デコレータを起動することで、
      <literal>DatabaseTests</literal> のテストを行うことができます。例えば、
      PHPUnit のコマンドライン版テストランナーでは
      <userinput>phpunit DatabaseTestSetup</userinput> とします。
    </para>

    <example id="fixtures.suite-level-setup.examples.DatabaseTestSetup.php">
      <title>スイートレベル設定のデコレータを書く</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';
require_once 'PHPUnit/Extensions/TestSetup.php';

class DatabaseTestSetup extends PHPUnit_Extensions_TestSetup
{
    protected $connection = NULL;

    protected function setUp()
    {
        $this->connection = new PDO(
          'mysql:host=wopr;dbname=test',
          'root',
          ''
        );
    }

    protected function tearDown()
    {
        $this->connection = NULL;
    }

    public static function suite()
    {
        return new DatabaseTestSetup(
          new PHPUnit_Framework_TestSuite('DatabaseTests')
        );
    }
}
?>]]></programlisting>
    </example>

    <para>
      このようにフィクスチャを共有することがテストの価値を下げてしまうということを、
      まだうまく伝え切れていないかもしれません。問題なのは、
      各オブジェクトが疎結合になっていないという設計なのです。
      複数が連携しているようなテストを作って設計上の問題から目をそらしてしまうのではなく、
      きちんと設計しなおした上で、スタブ (<xref linkend="mock-objects" /> を参照ください)
      を使用するテストを書くことをお勧めします。
    </para>
  </section>
</chapter>
