<?xml version="1.0" encoding="utf-8" ?>

<chapter id="automating-tests">
  <title>自動テスト</title>

  <caution>
    <para>
      このドキュメントは、すでにサポートが終了したバージョンの PHPUnit に関するものです。
    </para>

    <para>
      最新版の PHPUnit のドキュメントは
      <ulink url="../../current/ja/index.html">こちら</ulink>にあります。
    </para>
  </caution>

  <para>
    どんなにすぐれたプログラマも、間違いを犯します。
    よいプログラマとそうでないプログラマの違いは、
    よいプログラマはテストを行って間違いをできるだけ早く発見してしまうことです。
    テストをするのが早ければ早いほど間違いを発見しやすくなり、
    またそれを修正しやすくなります。
    リリース直前までテストを先延ばしにしておくことが非常に問題であるのはこのためです。
    そんなことをすると、すべてのエラーを発見しきることができず、
    発見したエラーを修正することも非常に難しくなります。結局は、
    トリアージを行ってどのエラーに対応するかを判断しなければならなくなります。
    なぜならすべてのエラーを完全に修正することは不可能だからです。
  </para>

  <para>
    <indexterm><primary>Unit Test (ユニットテスト)</primary></indexterm>

    PHPUnit を使用したテストは、全体としてはあなたがこれまでに行ってきたことと同じです。
    ただ、そのやり方が違うだけです。それは、<emphasis>テスト</emphasis>
    つまりあなたのプログラムが期待通りにふるまうことを調べることと
    <emphasis>総合テスト</emphasis> つまり実行可能なコード片がソフトウェアの各部分
    (部品) を自動的にテストすることとの違いになります。実行可能なコード片のことを、
    ユニットテスト (unit test) と呼びます。
  </para>

  <para>
    この章では、単純な <literal>print</literal>
    ベースのテストコードをもとにして完全な自動テストに書き換えていきます。
    PHP 組み込みの <literal>array</literal>
    をテストするように頼まれたとしましょう。このオブジェクトの機能のひとつに、
    関数 <literal>count()</literal> があります。新しく作成された配列では、
    <literal>count()</literal> 関数は <literal>0</literal> を返すはずです。
    そして要素を 1 つ追加すると <literal>count()</literal> は
    <literal>1</literal> を返すようになるはずです。テストしたい内容を
    <xref linkend="automating-tests.examples.array-test.php" />
    に示します。
  </para>

  <example id="automating-tests.examples.array-test.php">
    <title>配列操作のテスト</title>
    <programlisting><![CDATA[<?php
$fixture = array();
// $fixture は空のはずです。

$fixture[] = 'element';
// $fixture はひとつの要素を含むはずです。
?>]]></programlisting>
  </example>

  <para>
    期待通りの結果が得られているかどうかを調べるためのいちばん単純な方法は、
    要素を追加する前と後に <literal>count()</literal> の結果を表示することです
    (<xref linkend="automating-tests.examples.array-test2.php" /> を参照ください)。
    それぞれ <literal>0</literal> および <literal>1</literal> が得られたら、
    <literal>array</literal> および <literal>count()</literal>
    が期待通りに動作していることになります。
  </para>

  <example id="automating-tests.examples.array-test2.php">
    <title>print を使用した配列操作のテスト</title>
    <programlisting><![CDATA[<?php
$fixture = array();
print count($fixture) . "\n";

$fixture[] = 'element';
print count($fixture) . "\n";
?>]]></programlisting>
    <screen>0
1</screen>
  </example>

  <para>
    このテストは、成功したかどうかの判断を (出力結果を見て)
    手動で行わなければなりません。今度は、この判断を自動でできるようにしてみましょう。
    <xref linkend="automating-tests.examples.array-test3.php" /> では、
    期待される結果と実際の結果をコード中で比較して、もしそれらの値が等しければ
    <literal>ok</literal> と表示します。もし <literal>not ok</literal>
    と表示された場合は、どこかがおかしいということがわかります。
  </para>

  <example id="automating-tests.examples.array-test3.php">
    <title>期待値と実際の値を比較することによる配列操作のテスト</title>
    <programlisting><![CDATA[<?php
$fixture = array();
print count($fixture) == 0 ? "ok\n" : "not ok\n";

$fixture[] = 'element';
print count($fixture) == 1 ? "ok\n" : "not ok\n";
?>]]></programlisting>
    <screen>ok
ok</screen>
  </example>

  <para>
    <indexterm><primary>Assertions (アサーション)</primary></indexterm>

    今度は、相違があった際に例外を発生させる関数を用意して、
    期待値と実際の値を比較する処理を抽出してみましょう
    (<xref linkend="automating-tests.examples.array-test4.php" />)。
    これには 2 つの利点があります。テストが記述しやすくなること、
    そして何か問題があったときにのみそれを出力させることができるということです。
  </para>

  <example id="automating-tests.examples.array-test4.php">
    <title>アサーション関数を使用した配列操作のテスト</title>
    <programlisting><![CDATA[<?php
$fixture = array();
assertTrue(count($fixture) == 0);

$fixture[] = 'element';
assertTrue(count($fixture) == 1);

function assertTrue($condition)
{
    if (!$condition) {
        throw new Exception('Assertion failed.');
    }
}
?>]]></programlisting>
  </example>

  <para>
    <indexterm><primary>Automated Test (自動テスト)</primary></indexterm>

    これで、テストは完全に自動化されました。最初のバージョンでは単に
    <emphasis>テストする</emphasis> だけでしたが、このバージョンでは
    <emphasis>自動テスト</emphasis> になっています。
  </para>

  <para>
    自動テストを行う目的は、間違いを少なくすることです。
    いくらすばらしいテストを行ったところで
    あなたのコードが完璧なものになるわけではありませんが、
    自動テストを始めることで不具合の量を劇的に減らすことになるでしょう。
    自動テストによってあなたのコードは信頼性の高いものとなり、大胆な設計変更
    (リファクタリング) を行ったりチームメイトとの関係をよりよくしたり
    (複数チームでのテスト)、
    その日の朝に比べて帰宅前のコードがよりよくなっていることを確信できたりといった効果があります。
  </para>
</chapter>
