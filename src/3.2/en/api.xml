<?xml version="1.0" encoding="utf-8" ?>

<chapter id="api">
  <title>PHPUnit API</title>

  <caution>
    <para>
      You are looking at the documentation for a version of PHPUnit that is no
      longer supported.
    </para>

    <para>
      The documentation for the current version of PHPUnit can be found
      <ulink url="../../current/en/index.html">here</ulink>.
    </para>
  </caution>

  <para>
    For most uses, PHPUnit has a simple API: subclass
    <literal>PHPUnit_Framework_TestCase</literal> for your test cases and
    call <literal>assertTrue()</literal> or <literal>assertEquals()</literal>.
    However, for those of you who would like to look deeper into PHPUnit,
    here are all of its published methods and classes.
  </para>

  <section id="api.overview">
    <title>Overview</title>

    <para>
      Most of the time, you will encounter five classes or interfaces when you
      are using PHPUnit:
    </para>

    <variablelist>
      <varlistentry>
        <term><literal>PHPUnit_Framework_Assert</literal></term>
        <listitem>
          <para>
          A collection of static methods for checking actual values against
          expected values.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>PHPUnit_Framework_Test</literal></term>
        <listitem>
          <para>
            The interface of all objects that act like tests.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>PHPUnit_Framework_TestCase</literal></term>
        <listitem>
          <para>
            A single test.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>PHPUnit_Framework_TestSuite</literal></term>
        <listitem>
          <para>
            A collection of tests.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>PHPUnit_Framework_TestResult</literal></term>
        <listitem>
          <para>
            A summary of the results of running one or more tests.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>
      <xref linkend="api.overview.figures.PHPUnit_Framework.png" />
      shows the relationship of the five basic classes and interfaces
      in PHPUnit: <literal>PHPUnit_Framework_Assert</literal>,
      <literal>PHPUnit_Framework_Test</literal>,
      <literal>PHPUnit_Framework_TestCase</literal>,
      <literal>PHPUnit_Framework_TestSuite</literal>, and
      <literal>PHPUnit_Framework_TestResult</literal>.
    </para>

    <figure id="api.overview.figures.PHPUnit_Framework.png">
      <title>The five basic classes and interfaces in PHPUnit</title>

      <graphic fileref="figures/PHPUnit_Framework.png" />
    </figure>
  </section>

  <section id="api.assert">
    <title>PHPUnit_Framework_Assert</title>
    <indexterm><primary>PHPUnit_Framework_Assert</primary></indexterm>

    <para>
      <indexterm><primary>Assertions</primary></indexterm>
      <indexterm><primary>Design-by-Contract</primary></indexterm>

      Most test cases written for PHPUnit are derived indirectly from the class
      <literal>PHPUnit_Framework_Assert</literal>, which contains methods for
      automatically checking values and reporting discrepancies. The methods
      are declared static, so you can write design-by-contract style
      assertions in your methods and have them reported through PHPUnit
      (<xref linkend="api.assert.examples.Sample.php" />).
    </para>

    <example id="api.assert.examples.Sample.php">
      <title>Design-by-Contract Style Assertions</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

class Sample
{
    public function aSampleMethod($object)
    {
        PHPUnit_Framework_Assert::assertNotNull($object);
    }
}

$sample = new Sample;
$sample->aSampleMethod(NULL);
?>]]></programlisting>

<screen><![CDATA[Fatal error: Uncaught exception 'PHPUnit_Framework_ExpectationFailedException'
with message 'Failed asserting that <null> is not identical to <null>.']]></screen>
    </example>

    <para>
      Most of the time, though, you'll be checking the assertions inside of
      tests.
    </para>

    <para>
      There are two variants of each of the assertion methods: one takes a
      message to be displayed with the error as a parameter, and one does not.
      The optional message is typically displayed when a failure is displayed,
      which can make debugging easier.
    </para>

    <example id="api.assert.examples.MessageTest.php">
      <title>Using assertions with messages</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

class MessageTest extends PHPUnit_Framework_TestCase
{
    public function testMessage()
    {
        $this->assertTrue(FALSE, 'This is a custom message.');
    }
}
?>]]></programlisting>
    </example>

    <para>
      The following example shows the output you get when you run the
      <literal>testMessage()</literal> test from
      <xref linkend="api.assert.examples.MessageTest.php" />, using
      assertions with messages:
    </para>

    <screen><userinput>phpunit MessageTest</userinput><![CDATA[
PHPUnit 3.2.10 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) testMessage(MessageTest)
This is a custom message.
Failed asserting that <boolean:false> is true.
/home/sb/MessageTest.php:8

FAILURES!
Tests: 1, Failures: 1.]]></screen>

    <para>
      <xref linkend="api.assert.tables.assertions" /> shows all the varieties
      of assertions.
    </para>

    <table id="api.assert.tables.assertions">
      <title>Assertions</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Assertion</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>assertArrayHasKey()</primary></indexterm>
            <entry><literal>void assertArrayHasKey(mixed $key, array $array)</literal></entry>
            <entry>Reports an error if <literal>$array</literal> does not have the <literal>$key</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertArrayHasKey(mixed $key, array $array, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$array</literal> does not have the <literal>$key</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertClassHasAttribute()</primary></indexterm>
            <entry><literal>void assertClassHasAttribute(string $attributeName, string $className)</literal></entry>
            <entry>Reports an error if <literal>$className::attributeName</literal> does not exist.</entry>
          </row>
          <row>
            <entry><literal>void assertClassHasAttribute(string $attributeName, string $className, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$className::attributeName</literal> does not exist.</entry>
          </row>
          <row>
            <indexterm><primary>assertClassHasStaticAttribute()</primary></indexterm>
            <entry><literal>void assertClassHasStaticAttribute(string $attributeName, string $className)</literal></entry>
            <entry>Reports an error if <literal>$className::attributeName</literal> does not exist or is not <literal>static</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertClassHasStaticAttribute(string $attributeName, string $className, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$className::attributeName</literal> does not exist or is not <literal>static</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertContains()</primary></indexterm>
            <entry><literal>void assertContains(mixed $needle, array $haystack)</literal></entry>
            <entry>Reports an error if <literal>$needle</literal> is not an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertContains(mixed $needle, array $haystack, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is not an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertContains(mixed $needle, Iterator $haystack)</literal></entry>
            <entry>Reports an error if <literal>$needle</literal> is not an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertContains(mixed $needle, Iterator $haystack, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is not an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertContains(string $needle, string $haystack)</literal></entry>
            <entry>Reports an error if <literal>$needle</literal> is not a substring of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertContains(string $needle, string $haystack, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is not a substring of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertContainsOnly()</primary></indexterm>
            <entry><literal>assertContainsOnly(string $type, array $haystack)</literal></entry>
            <entry>Reports an error if <literal>$haystack</literal> does not contain only variables of type <literal>$type</literal>.</entry>
          </row>
          <row>
            <entry><literal>assertContainsOnly(string $type, array $haystack, NULL, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$haystack</literal> does not contain only variables of type <literal>$type</literal>.</entry>
          </row>
          <row>
            <entry><literal>assertContainsOnly(string $type, array $haystack, bool $isNativeType)</literal></entry>
            <entry>Reports an error if <literal>$haystack</literal> does not contain only variables of type <literal>$type</literal>. <literal>$isNativeType</literal> is a flag used to indicate whether <literal>$type</literal> is a native PHP type or not.</entry>
          </row>
          <row>
            <entry><literal>assertContainsOnly(string $type, array $haystack, bool $isNativeType, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$haystack</literal> does not contain only variables of type <literal>$type</literal>. <literal>$isNativeType</literal> is a flag used to indicate whether <literal>$type</literal> is a native PHP type or not.</entry>
          </row>
          <row>
            <entry><literal>assertContainsOnly(string $type, Iterator $haystack)</literal></entry>
            <entry>Reports an error if <literal>$haystack</literal> does not contain only variables of type <literal>$type</literal>.</entry>
          </row>
          <row>
            <entry><literal>assertContainsOnly(string $type, Iterator $haystack, NULL, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$haystack</literal> does not contain only variables of type <literal>$type</literal>.</entry>
          </row>
          <row>
            <entry><literal>assertContainsOnly(string $type, Iterator $haystack, bool $isNativeType)</literal></entry>
            <entry>Reports an error if <literal>$haystack</literal> does not contain only variables of type <literal>$type</literal>. <literal>$isNativeType</literal> is a flag used to indicate whether <literal>$type</literal> is a native PHP type or not.</entry>
          </row>
          <row>
            <entry><literal>assertContainsOnly(string $type, Iterator $haystack, bool $isNativeType, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$haystack</literal> does not contain only variables of type <literal>$type</literal>. <literal>$isNativeType</literal> is a flag used to indicate whether <literal>$type</literal> is a native PHP type or not.</entry>
          </row>
          <row>
            <indexterm><primary>assertEquals()</primary></indexterm>
            <entry><literal>void assertEquals(array $expected, array $actual)</literal></entry>
            <entry>Reports an error if the two arrays <literal>$expected</literal> and <literal>$actual</literal> are not equal.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(array $expected, array $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two arrays <literal>$expected</literal> and <literal>$actual</literal> are not equal.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(float $expected, float $actual, '', float $delta = 0)</literal></entry>
            <entry>Reports an error if the two floats <literal>$expected</literal> and <literal>$actual</literal> are not within <literal>$delta</literal> of each other.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(float $expected, float $actual, string $message, float $delta = 0)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two floats <literal>$expected</literal> and <literal>$actual</literal> are not within <literal>$delta</literal> of each other.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(object $expected, object $actual)</literal></entry>
            <entry>Reports an error if the two objects <literal>$expected</literal> and <literal>$actual</literal> do not have equal attribute values.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(object $expected, object $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two objects <literal>$expected</literal> and <literal>$actual</literal> do not have equal attribute values.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(string $expected, string $actual)</literal></entry>
            <entry>Reports an error if the two strings <literal>$expected</literal> and <literal>$actual</literal> are not equal. The error is reported as the delta between the two strings.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(string $expected, string $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two strings <literal>$expected</literal> and <literal>$actual</literal> are not equal. The error is reported as the delta between the two strings.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(DOMDocument $expected, DOMDocument $actual)</literal></entry>
            <entry>Reports an error if the uncommented canonical form of the XML documents represented by the two DOMDocument objects <literal>$expected</literal> and <literal>$actual</literal> are not equal.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(DOMDocument $expected, DOMDocument $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the uncommented canonical form of the XML documents represented by the two DOMDocument objects <literal>$expected</literal> and <literal>$actual</literal> are not equal.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(mixed $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actual</literal> are not equal.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(mixed $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> are not equal.</entry>
          </row>
          <row>
            <indexterm><primary>assertFalse()</primary></indexterm>
            <entry><literal>void assertFalse(bool $condition)</literal></entry>
            <entry>Reports an error if <literal>$condition</literal> is <literal>TRUE</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertFalse(bool $condition, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$condition</literal> is <literal>TRUE</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertFileEquals()</primary></indexterm>
            <entry><literal>void assertFileEquals(string $expected, string $actual)</literal></entry>
            <entry>Reports an error if the file specified by <literal>$expected</literal> does not have the same contents as the file specified by <literal>$actual</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertFileEquals(string $expected, string $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal>  if the file specified by <literal>$expected</literal> does not have the same contents as the file specified by <literal>$actual</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertFileExists()</primary></indexterm>
            <entry><literal>void assertFileExists(string $filename)</literal></entry>
            <entry>Reports an error if the file specified by <literal>$filename</literal> does not exist.</entry>
          </row>
          <row>
            <entry><literal>void assertFileExists(string $filename, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the file specified by <literal>$filename</literal> does not exist.</entry>
          </row>
          <row>
            <indexterm><primary>assertGreaterThan()</primary></indexterm>
            <entry><literal>void assertGreaterThan(mixed $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the value of <literal>$actual</literal> is not greater than the value of <literal>$expected</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertGreaterThan(mixed $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the value of <literal>$actual</literal> is not greater than the value of <literal>$expected</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertGreaterThanOrEqual()</primary></indexterm>
            <entry><literal>void assertGreaterThanOrEqual(mixed $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the value of <literal>$actual</literal> is not greater than or equal to the value of <literal>$expected</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertGreaterThanOrEqual(mixed $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the value of <literal>$actual</literal> is not greater than or equal to the value of <literal>$expected</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertLessThan()</primary></indexterm>
            <entry><literal>void assertLessThan(mixed $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the value of <literal>$actual</literal> is not less than the value of <literal>$expected</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertLessThan(mixed $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the value of <literal>$actual</literal> is not less than the value of <literal>$expected</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertLessThanOrEqual()</primary></indexterm>
            <entry><literal>void assertLessThanOrEqual(mixed $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the value of <literal>$actual</literal> is not less than or equal to the value of <literal>$expected</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertLessThanOrEqual(mixed $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the value of <literal>$actual</literal> is not less than or equal to the value of <literal>$expected</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertNull()</primary></indexterm>
            <entry><literal>void assertNull(mixed $variable)</literal></entry>
            <entry>Reports an error if <literal>$variable</literal> is not <literal>NULL</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNull(mixed $variable, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$variable</literal> is not <literal>NULL</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertObjectHasAttribute()</primary></indexterm>
            <entry><literal>void assertObjectHasAttribute(string $attributeName, object $object)</literal></entry>
            <entry>Reports an error if <literal>$object->attributeName</literal> does not exist.</entry>
          </row>
          <row>
            <entry><literal>void assertObjectHasAttribute(string $attributeName, object $object, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$object->attributeName</literal> does not exist.</entry>
          </row>
          <row>
            <indexterm><primary>assertRegExp()</primary></indexterm>
            <entry><literal>void assertRegExp(string $pattern, string $string)</literal></entry>
            <entry>Reports an error if <literal>$string</literal> does not match the regular expression <literal>$pattern</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertRegExp(string $pattern, string $string, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$string</literal> does not match the regular expression <literal>$pattern</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertSame()</primary></indexterm>
            <entry><literal>void assertSame(object $expected, object $actual)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actual</literal> do not reference the same object.</entry>
          </row>
          <row>
            <entry><literal>void assertSame(object $expected, object $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> do not reference the same object.</entry>
          </row>
          <row>
            <entry><literal>void assertSame(mixed $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actual</literal> do not have the same type and value.</entry>
          </row>
          <row>
            <entry><literal>void assertSame(mixed $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> do not have the same type and value.</entry>
          </row>
          <row>
            <indexterm><primary>assertTrue()</primary></indexterm>
            <entry><literal>void assertTrue(bool $condition)</literal></entry>
            <entry>Reports an error if <literal>$condition</literal> is <literal>FALSE</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertTrue(bool $condition, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$condition</literal> is <literal>FALSE</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertType()</primary></indexterm>
            <entry><literal>void assertType(string $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the variable <literal>$actual</literal> is not of type <literal>$expected</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertType(string $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the variable <literal>$actual</literal> is not of type <literal>$expected</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertXmlFileEqualsXmlFile()</primary></indexterm>
            <entry><literal>void assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile)</literal></entry>
            <entry>Reports an error if the XML document in <literal>$actualFile</literal> is not equal to the XML document in <literal>$expectedFile</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the XML document in <literal>$actualFile</literal> is not equal to the XML document in <literal>$expectedFile</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertXmlStringEqualsXmlString()</primary></indexterm>
            <entry><literal>void assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml)</literal></entry>
            <entry>Reports an error if the XML document in <literal>$actualXml</literal> is not equal to the XML document in <literal>$expectedXml</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the XML document in <literal>$actualXml</literal> is not equal to the XML document in <literal>$expectedXml</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertArrayNotHasKey()</primary></indexterm>
            <entry><literal>void assertArrayNotHasKey(mixed $key, array $array)</literal></entry>
            <entry>Reports an error if <literal>$array</literal> has the <literal>$key</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertArrayNotHasKey(mixed $key, array $array, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$array</literal> has the <literal>$key</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertClassNotHasAttribute()</primary></indexterm>
            <entry><literal>void assertClassNotHasAttribute(string $attributeName, string $className)</literal></entry>
            <entry>Reports an error if <literal>$className::attributeName</literal> exists.</entry>
          </row>
          <row>
            <entry><literal>void assertClassNotHasAttribute(string $attributeName, string $className, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$className::attributeName</literal> exists.</entry>
          </row>
          <row>
            <indexterm><primary>assertClassNotHasStaticAttribute()</primary></indexterm>
            <entry><literal>void assertClassNotHasStaticAttribute(string $attributeName, string $className)</literal></entry>
            <entry>Reports an error if <literal>$className::attributeName</literal> exists and is <literal>static</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertClassNotHasStaticAttribute(string $attributeName, string $className, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$className::attributeName</literal> exists and is <literal>static</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertNotContains()</primary></indexterm>
            <entry><literal>void assertNotContains(mixed $needle, array $haystack)</literal></entry>
            <entry>Reports an error if <literal>$needle</literal> is an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotContains(mixed $needle, array $haystack, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotContains(mixed $needle, Iterator $haystack)</literal></entry>
            <entry>Reports an error if <literal>$needle</literal> is an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotContains(mixed $needle, Iterator $haystack, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotContains(string $needle, string $haystack)</literal></entry>
            <entry>Reports an error if <literal>$needle</literal> is a substring of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotContains(string $needle, string $haystack, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is a substring of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertNotContainsOnly()</primary></indexterm>
            <entry><literal>assertNotContainsOnly(string $type, array $haystack)</literal></entry>
            <entry>Reports an error if <literal>$haystack</literal> contains only variables of type <literal>$type</literal>.</entry>
          </row>
          <row>
            <entry><literal>assertNotContainsOnly(string $type, array $haystack, NULL, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$haystack</literal> contains only variables of type <literal>$type</literal>.</entry>
          </row>
          <row>
            <entry><literal>assertNotContainsOnly(string $type, array $haystack, bool $isNativeType)</literal></entry>
            <entry>Reports an error if <literal>$haystack</literal> contains only variables of type <literal>$type</literal>. <literal>$isNativeType</literal> is a flag used to indicate whether <literal>$type</literal> is a native PHP type or not.</entry>
          </row>
          <row>
            <entry><literal>assertNotContainsOnly(string $type, array $haystack, bool $isNativeType, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$haystack</literal> contains only variables of type <literal>$type</literal>. <literal>$isNativeType</literal> is a flag used to indicate whether <literal>$type</literal> is a native PHP type or not.</entry>
          </row>
          <row>
            <entry><literal>assertNotContainsOnly(string $type, Iterator $haystack)</literal></entry>
            <entry>Reports an error if <literal>$haystack</literal> contains only variables of type <literal>$type</literal>.</entry>
          </row>
          <row>
            <entry><literal>assertNotContainsOnly(string $type, Iterator $haystack, NULL, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$haystack</literal> contains only variables of type <literal>$type</literal>.</entry>
          </row>
          <row>
            <entry><literal>assertNotContainsOnly(string $type, Iterator $haystack, bool $isNativeType)</literal></entry>
            <entry>Reports an error if <literal>$haystack</literal> contains only variables of type <literal>$type</literal>. <literal>$isNativeType</literal> is a flag used to indicate whether <literal>$type</literal> is a native PHP type or not.</entry>
          </row>
          <row>
            <entry><literal>assertNotContainsOnly(string $type, Iterator $haystack, bool $isNativeType, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$haystack</literal> contains only variables of type <literal>$type</literal>. <literal>$isNativeType</literal> is a flag used to indicate whether <literal>$type</literal> is a native PHP type or not.</entry>
          </row>
          <row>
            <indexterm><primary>assertNotEquals()</primary></indexterm>
            <entry><literal>void assertNotEquals(array $expected, array $actual)</literal></entry>
            <entry>Reports an error if the two arrays <literal>$expected</literal> and <literal>$actual</literal> are equal.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(array $expected, array $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two arrays <literal>$expected</literal> and <literal>$actual</literal> are equal.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(float $expected, float $actual, '', float $delta = 0)</literal></entry>
            <entry>Reports an error if the two floats <literal>$expected</literal> and <literal>$actual</literal> are within <literal>$delta</literal> of each other.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(float $expected, float $actual, string $message, float $delta = 0)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two floats <literal>$expected</literal> and <literal>$actual</literal> are within <literal>$delta</literal> of each other.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(object $expected, object $actual)</literal></entry>
            <entry>Reports an error if the two objects <literal>$expected</literal> and <literal>$actual</literal> have equal attribute values.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(object $expected, object $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two objects <literal>$expected</literal> and <literal>$actual</literal> have equal attribute values.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(string $expected, string $actual)</literal></entry>
            <entry>Reports an error if the two strings <literal>$expected</literal> and <literal>$actual</literal> are equal.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(string $expected, string $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two strings <literal>$expected</literal> and <literal>$actual</literal> are equal.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(DOMDocument $expected, DOMDocument $actual)</literal></entry>
            <entry>Reports an error if the uncommented canonical form of the XML documents represented by the two DOMDocument objects <literal>$expected</literal> and <literal>$actual</literal> are equal.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(DOMDocument $expected, DOMDocument $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the uncommented canonical form of the XML documents represented by the two DOMDocument objects <literal>$expected</literal> and <literal>$actual</literal> are equal.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(mixed $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actual</literal> are equal.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(mixed $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> are equal.</entry>
          </row>
          <row>
            <indexterm><primary>assertFileNotEquals()</primary></indexterm>
            <entry><literal>void assertFileNotEquals(string $expected, string $actual)</literal></entry>
            <entry>Reports an error if the file specified by <literal>$expected</literal> has the same contents as the file specified by <literal>$actual</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertFileNotEquals(string $expected, string $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal>  if the file specified by <literal>$expected</literal> has the same contents as the file specified by <literal>$actual</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertFileNotExists()</primary></indexterm>
            <entry><literal>void assertFileNotExists(string $filename)</literal></entry>
            <entry>Reports an error if the file specified by <literal>$filename</literal> exists.</entry>
          </row>
          <row>
            <entry><literal>void assertFileNotExists(string $filename, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the file specified by <literal>$filename</literal> exists.</entry>
          </row>
          <row>
            <indexterm><primary>assertNotNull()</primary></indexterm>
            <entry><literal>void assertNotNull(mixed $variable)</literal></entry>
            <entry>Reports an error if <literal>$variable</literal> is <literal>NULL</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotNull(mixed $variable, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$variable</literal> is <literal>NULL</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertNotRegExp()</primary></indexterm>
            <entry><literal>void assertNotRegExp(string $pattern, string $string)</literal></entry>
            <entry>Reports an error if <literal>$string</literal> matches the regular expression <literal>$pattern</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotRegExp(string $pattern, string $string, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$string</literal> matches the regular expression <literal>$pattern</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertNotSame()</primary></indexterm>
            <entry><literal>void assertNotSame(object $expected, object $actual)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actual</literal> reference the same object.</entry>
          </row>
          <row>
            <entry><literal>void assertNotSame(object $expected, object $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> reference the same object.</entry>
          </row>
          <row>
            <entry><literal>void assertNotSame(mixed $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actual</literal> have the same type and value.</entry>
          </row>
          <row>
            <entry><literal>void assertNotSame(mixed $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> have the same type and value.</entry>
          </row>
          <row>
            <indexterm><primary>assertNotType()</primary></indexterm>
            <entry><literal>void assertNotType(string $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the variable <literal>$actual</literal> is of type <literal>$expected</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotType(string $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the variable <literal>$actual</literal> is of type <literal>$expected</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertObjectNotHasAttribute()</primary></indexterm>
            <entry><literal>void assertObjectNotHasAttribute(string $attributeName, object $object)</literal></entry>
            <entry>Reports an error if <literal>$object->attributeName</literal> exists.</entry>
          </row>
          <row>
            <entry><literal>void assertObjectNotHasAttribute(string $attributeName, object $object, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$object->attributeName</literal> exists.</entry>
          </row>
          <row>
            <indexterm><primary>assertXmlFileNotEqualsXmlFile()</primary></indexterm>
            <entry><literal>void assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile)</literal></entry>
            <entry>Reports an error if the XML document in <literal>$actualFile</literal> is equal to the XML document in <literal>$expectedFile</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the XML document in <literal>$actualFile</literal> is equal to the XML document in <literal>$expectedFile</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertXmlStringNotEqualsXmlString()</primary></indexterm>
            <entry><literal>void assertXmlStringNotEqualsXmlString(string $expectedXml, string $actualXml)</literal></entry>
            <entry>Reports an error if the XML document in <literal>$actualXml</literal> is equal to the XML document in <literal>$expectedXml</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertXmlStringNotEqualsXmlString(string $expectedXml, string $actualXml, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the XML document in <literal>$actualXml</literal> is equal to the XML document in <literal>$expectedXml</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertAttributeContains()</primary></indexterm>
            <entry><literal>void assertAttributeContains(mixed $needle, string $haystackAttributeName, string $haystackClassName)</literal></entry>
            <entry>Reports an error if <literal>$needle</literal> is not an element of <literal>$haystackClassName::$haystackAttributeName</literal> which can be an array, a string, or an object that implements the <literal>Iterator</literal> interface. The visibility of the <literal>$haystackClassName::$haystackAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeContains(mixed $needle, string $haystackAttributeName, string $haystackClassName, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is not an element of <literal>$haystackClassName::$haystackAttributeName</literal> which can be an array, a string, or an object that implements the <literal>Iterator</literal> interface. The visibility of the <literal>$haystackClassName::$haystackAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertAttributeNotContains()</primary></indexterm>
            <entry><literal>void assertAttributeNotContains(mixed $needle, string $haystackAttributeName, string $haystackClassName)</literal></entry>
            <entry>Reports an error if <literal>$needle</literal> is an element of <literal>$haystackClassName::$haystackAttributeName</literal> which can be an array, a string, or an object that implements the <literal>Iterator</literal> interface. The visibility of the <literal>$haystackClassName::$haystackAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotContains(mixed $needle, string $haystackAttributeName, string $haystackClassName, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is an element of <literal>$haystackClassName::$haystackAttributeName</literal> which can be an array, a string, or an object that implements the <literal>Iterator</literal> interface. The visibility of the <literal>$haystackClassName::$haystackAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeContains(mixed $needle, string $haystackAttributeName, object $haystackObject)</literal></entry>
            <entry>Reports an error if <literal>$needle</literal> is not an element of <literal>$haystackObject->haystackAttributeName</literal> which can be an array, a string, or an object that implements the <literal>Iterator</literal> interface. The visibility of the <literal>$haystackObject->haystackAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeContains(mixed $needle, string $haystackAttributeName, object $haystackObject, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is not an element of <literal>$haystackObject->haystackAttributeName</literal> which can be an array, a string, or an object that implements the <literal>Iterator</literal> interface. The visibility of the <literal>$haystackObject->haystackAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotContains(mixed $needle, string $haystackAttributeName, object $haystackObject)</literal></entry>
            <entry>Reports an error if <literal>$needle</literal> is an element of <literal>$haystackObject->haystackAttributeName</literal> which can be an array, a string, or an object that implements the <literal>Iterator</literal> interface. The visibility of the <literal>$haystackObject->haystackAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotContains(mixed $needle, string $haystackAttributeName, object $haystackObject, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is an element of <literal>$haystackObject->haystackAttributeName</literal> which can be an array, a string, or an object that implements the <literal>Iterator</literal> interface. The visibility of the <literal>$haystackObject->haystackAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertAttributeEquals()</primary></indexterm>
            <entry><literal>void assertAttributeEquals(array $expected, string $actualAttributeName, string $actualClassName)</literal></entry>
            <entry>Reports an error if the two arrays <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are not equal. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(array $expected, string $actualAttributeName, string $actualClassName, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two arrays <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are not equal. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertAttributeNotEquals()</primary></indexterm>
            <entry><literal>void assertAttributeNotEquals(array $expected, string $actualAttributeName, string $actualClassName)</literal></entry>
            <entry>Reports an error if the two arrays <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are equal. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(array $expected, string $actualAttributeName, string $actualClassName, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two arrays <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are equal. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(float $expected, string $actualAttributeName, string $actualClassName, '', float $delta = 0)</literal></entry>
            <entry>Reports an error if the two floats <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are not within <literal>$delta</literal> of each other. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(float $expected, string $actualAttributeName, string $actualClassName, string $message, float $delta = 0)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two floats <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are not within <literal>$delta</literal> of each other. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(float $expected, string $actualAttributeName, string $actualClassName, '', float $delta = 0)</literal></entry>
            <entry>Reports an error if the two floats <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are within <literal>$delta</literal> of each other. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(float $expected, string $actualAttributeName, string $actualClassName, string $message, float $delta = 0)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two floats <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are within <literal>$delta</literal> of each other. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(string $expected, string $actualAttributeName, string $actualClassName)</literal></entry>
            <entry>Reports an error if the two strings <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are not equal. The error is reported as the delta between the two strings. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(string $expected, string $actualAttributeName, string $actualClassName, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two strings <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are not equal. The error is reported as the delta between the two strings. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(string $expected, string $actualAttributeName, string $actualClassName)</literal></entry>
            <entry>Reports an error if the two strings <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are equal. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(string $expected, string $actualAttributeName, string $actualClassName, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two strings <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are equal. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(mixed $expected, string $actualAttributeName, string $actualClassName)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are not equal. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(mixed $expected, string $actualAttributeName, string $actualClassName, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are not equal. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(mixed $expected, string $actualAttributeName, string $actualClassName)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are equal. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(mixed $expected, string $actualAttributeName, string $actualClassName, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actualClassName::$actualAttributeName</literal> are equal. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(array $expected, string $actualAttributeName, object $actualObject)</literal></entry>
            <entry>Reports an error if the two arrays <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are not equal. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(array $expected, string $actualAttributeName, object $actualObject, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two arrays <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are not equal. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(array $expected, string $actualAttributeName, object $actualObject)</literal></entry>
            <entry>Reports an error if the two arrays <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are equal. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(array $expected, string $actualAttributeName, object $actualObject, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two arrays <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are equal. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(float $expected, string $actualAttributeName, object $actualObject, '', float $delta = 0)</literal></entry>
            <entry>Reports an error if the two floats <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are not within <literal>$delta</literal> of each other. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(float $expected, string $actualAttributeName, object $actualObject, string $message, float $delta = 0)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two floats <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are not within <literal>$delta</literal> of each other. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(float $expected, string $actualAttributeName, object $actualObject, '', float $delta = 0)</literal></entry>
            <entry>Reports an error if the two floats <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are within <literal>$delta</literal> of each other. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(float $expected, string $actualAttributeName, object $actualObject, string $message, float $delta = 0)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two floats <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are within <literal>$delta</literal> of each other. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(string $expected, string $actualAttributeName, object $actualObject)</literal></entry>
            <entry>Reports an error if the two strings <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are not equal. The error is reported as the delta between the two strings. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(string $expected, string $actualAttributeName, object $actualObject, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two strings <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are not equal. The error is reported as the delta between the two strings. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(string $expected, string $actualAttributeName, object $actualObject)</literal></entry>
            <entry>Reports an error if the two strings <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are equal. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(string $expected, string $actualAttributeName, object $actualObject, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two strings <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are equal. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(mixed $expected, string $actualAttributeName, object $actualObject)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are not equal. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeEquals(mixed $expected, string $actualAttributeName, object $actualObject, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are not equal. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(mixed $expected, string $actualAttributeName, object $actualObject)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are equal. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotEquals(mixed $expected, string $actualAttributeName, object $actualObject, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actualObject->actualAttributeName</literal> are equal. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertAttributeSame()</primary></indexterm>
            <entry><literal>void assertAttributeSame(object $expected, string $actualAttributeName, string $actualClassName)</literal></entry>
            <entry>Reports an error if <literal>$actualClassName::$actualAttributeName</literal> and <literal>$actual</literal> do not reference the same object. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeSame(object $expected, string $actualAttributeName, string $actualClassName, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$actualClassName::$actualAttributeName</literal> and <literal>$actual</literal> do not reference the same object. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeSame(mixed $expected, string $actualAttributeName, string $actualClassName)</literal></entry>
            <entry>Reports an error if <literal>$actualClassName::$actualAttributeName</literal> and <literal>$actual</literal> do not have the same type and value. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeSame(mixed $expected, string $actualAttributeName, string $actualClassName, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$actualClassName::$actualAttributeName</literal> and <literal>$actual</literal> do not have the same type and value. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>assertAttributeNotSame()</primary></indexterm>
            <entry><literal>void assertAttributeNotSame(object $expected, string $actualAttributeName, string $actualClassName)</literal></entry>
            <entry>Reports an error if <literal>$actualClassName::$actualAttributeName</literal> and <literal>$actual</literal> reference the same object. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotSame(object $expected, string $actualAttributeName, string $actualClassName, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$actualClassName::$actualAttributeName</literal> and <literal>$actual</literal> reference the same object. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotSame(mixed $expected, string $actualAttributeName, string $actualClassName)</literal></entry>
            <entry>Reports an error if <literal>$actualClassName::$actualAttributeName</literal> and <literal>$actual</literal> have the same type and value. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotSame(mixed $expected, string $actualAttributeName, string $actualClassName, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$actualClassName::$actualAttributeName</literal> and <literal>$actual</literal> have the same type and value. The visibility of the <literal>$actualClassName::$actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeSame(object $expected, string $actualAttributeName, object $actualObject)</literal></entry>
            <entry>Reports an error if <literal>$actualObject->actualAttributeName</literal> and <literal>$actual</literal> do not reference the same object. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeSame(object $expected, string $actualAttributeName, object $actualObject, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$actualObject->actualAttributeName</literal> and <literal>$actual</literal> do not reference the same object. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeSame(mixed $expected, string $actualAttributeName, object $actualObject)</literal></entry>
            <entry>Reports an error if <literal>$actualObject->actualAttributeName</literal> and <literal>$actual</literal> do not have the same type and value. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeSame(mixed $expected, string $actualAttributeName, object $actualObject, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$actualObject->actualAttributeName</literal> and <literal>$actual</literal> do not have the same type and value. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotSame(object $expected, string $actualAttributeName, object $actualObject)</literal></entry>
            <entry>Reports an error if <literal>$actualObject->actualAttributeName</literal> and <literal>$actual</literal> reference the same object. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotSame(object $expected, string $actualAttributeName, object $actualObject, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$actualObject->actualAttributeName</literal> and <literal>$actual</literal> reference the same object. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotSame(mixed $expected, string $actualAttributeName, object $actualObject)</literal></entry>
            <entry>Reports an error if <literal>$actualObject->actualAttributeName</literal> and <literal>$actual</literal> have the same type and value. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertAttributeNotSame(mixed $expected, string $actualAttributeName, object $actualObject, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$actualObject->actualAttributeName</literal> and <literal>$actual</literal> have the same type and value. The visibility of the <literal>$actualObject->actualAttributeName</literal> attribute may be <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal>.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <indexterm><primary>assertThat()</primary></indexterm>
      More complex assertions can be formulated using the
      <literal>PHPUnit_Framework_Constraint</literal> classes. They can be
      evaluated using the <literal>assertThat()</literal> method as shown
      in <xref linkend="api.assert.examples.IsNotEqual.php" />.
    </para>

    <example id="api.assert.examples.IsNotEqual.php">
      <title>Using assertThat() with constraint objects</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

class ConstraintTest extends PHPUnit_Framework_TestCase
{
    public function testNotEquals()
    {
        $constraint = $this->logicalNot(
          $this->equalTo('foo')
        );

        $this->assertThat('foo', $constraint);
    }
}
?>]]></programlisting>

<screen><userinput>phpunit ConstraintTest</userinput><![CDATA[
PHPUnit 3.2.10 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) testNotEquals(ConstraintTest)
Failed asserting that <string:foo> is not equal to <string:foo>.
/home/sb/ConstraintTest.php:12

FAILURES!
Tests: 1, Failures: 1.]]></screen>
    </example>

    <para>
      <xref linkend="api.assert.tables.constraints" /> shows the available
      <literal>PHPUnit_Framework_Constraint</literal> implementations.
    </para>

    <table id="api.assert.tables.constraints">
      <title>Constraints</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Constraint</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>attribute()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_Attribute attribute(PHPUnit_Framework_Constraint $constraint, $attributeName)</literal></entry>
            <entry>Constraint that applies another constraint to an attribute of a class or an object.</entry>
          </row>
          <row>
            <indexterm><primary>anything()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_IsAnything anything()</literal></entry>
            <entry>Constraint that accepts any input value.</entry>
          </row>
          <row>
            <indexterm><primary>arrayHasKey()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_ArrayHasKey arrayHasKey(mixed $key)</literal></entry>
            <entry>Constraint that asserts that the array it is evaluated for has a given key.</entry>
          </row>
          <row>
            <indexterm><primary>contains()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_TraversableContains contains(mixed $value)</literal></entry>
            <entry>Constraint that asserts that the <literal>array</literal> or object that implements the <literal>Iterator</literal> interface it is evaluated for contains a given value.</entry>
          </row>
          <row>
            <indexterm><primary>equalTo()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_IsEqual equalTo($value, $delta = 0, $maxDepth = 10)</literal></entry>
            <entry>Constraint that checks if one value is equal to another.</entry>
          </row>
          <row>
            <indexterm><primary>attributeEqualTo()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_Attribute attributeEqualTo($attributeName, $value, $delta = 0, $maxDepth = 10)</literal></entry>
            <entry>Constraint that checks if a value is equal to an attribute of a class or of an object.</entry>
          </row>
          <row>
            <indexterm><primary>fileExists()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_FileExists fileExists()</literal></entry>
            <entry>Constraint that checks if the file(name) that it is evaluated for exists.</entry>
          </row>
          <row>
            <indexterm><primary>greaterThan()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_GreaterThan greaterThan(mixed $value)</literal></entry>
            <entry>Constraint that asserts that the value it is evaluated for is greater than a given value.</entry>
          </row>
          <row>
            <indexterm><primary>greaterThanOrEqual()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_Or greaterThanOrEqual(mixed $value)</literal></entry>
            <entry>Constraint that asserts that the value it is evaluated for is greater than or equal to a given value.</entry>
          </row>
          <row>
            <indexterm><primary>classHasAttribute()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_ClassHasAttribute classHasAttribute(string $attributeName)</literal></entry>
            <entry>Constraint that asserts that the class it is evaluated for has a given attribute.</entry>
          </row>
          <row>
            <indexterm><primary>classHasStaticAttribute()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_ClassHasStaticAttribute classHasStaticAttribute(string $attributeName)</literal></entry>
            <entry>Constraint that asserts that the class it is evaluated for has a given static attribute.</entry>
          </row>
          <row>
            <indexterm><primary>hasAttribute()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_ObjectHasAttribute hasAttribute(string $attributeName)</literal></entry>
            <entry>Constraint that asserts that the object it is evaluated for has a given attribute.</entry>
          </row>
          <row>
            <indexterm><primary>identicalTo()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_IsIdentical identicalTo(mixed $value)</literal></entry>
            <entry>Constraint that asserts that one value is identical to another.</entry>
          </row>
          <row>
            <indexterm><primary>isInstanceOf()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_IsInstanceOf isInstanceOf(string $className)</literal></entry>
            <entry>Constraint that asserts that the object it is evaluated for is an instance of a given class.</entry>
          </row>
          <row>
            <indexterm><primary>isType()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_IsType isType(string $type)</literal></entry>
            <entry>Constraint that asserts that the value it is evaluated for is of a specified type.</entry>
          </row>
          <row>
            <indexterm><primary>lessThan()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_LessThan lessThan(mixed $value)</literal></entry>
            <entry>Constraint that asserts that the value it is evaluated for is smaller than a given value.</entry>
          </row>
          <row>
            <indexterm><primary>lessThanOrEqual()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_Or lessThanOrEqual(mixed $value)</literal></entry>
            <entry>Constraint that asserts that the value it is evaluated for is smaller than or equal to a given value.</entry>
          </row>
          <row>
            <indexterm><primary>logicalAnd()</primary></indexterm>
            <entry><literal>logicalAnd()</literal></entry>
            <entry>Logical AND.</entry>
          </row>
          <row>
            <indexterm><primary>logicalNot()</primary></indexterm>
            <entry><literal>logicalNot(PHPUnit_Framework_Constraint $constraint)</literal></entry>
            <entry>Logical NOT.</entry>
          </row>
          <row>
            <indexterm><primary>logicalOr()</primary></indexterm>
            <entry><literal>logicalOr()</literal></entry>
            <entry>Logical OR.</entry>
          </row>
          <row>
            <indexterm><primary>logicalXor()</primary></indexterm>
            <entry><literal>logicalXor()</literal></entry>
            <entry>Logical XOR.</entry>
          </row>
          <row>
            <indexterm><primary>matchesRegularExpression()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_PCREMatch matchesRegularExpression(string $pattern)</literal></entry>
            <entry>Constraint that asserts that the string it is evaluated for matches a regular expression.</entry>
          </row>
          <row>
            <indexterm><primary>stringContains()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_StringContains stringContains(string $string, bool $case)</literal></entry>
            <entry>Constraint that asserts that the string it is evaluated for contains a given string.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      You may find that you need other assertions than these to compare
      objects specific to your project. Create your own <literal>Assert</literal>
      class to contain these assertions to simplify your tests.
    </para>

    <para>
      Failing assertions all call a single bottleneck method,
      <literal>fail(string $message)</literal>, which throws an
      <literal>PHPUnit_Framework_AssertionFailedError</literal>. There is
      also a variant which takes no parameters. Call <literal>fail()</literal>
      explicitly when your test encounters an error. The test for an expected
      exception is an example.
      <xref linkend="api.assert.tables.bottleneck-methods" /> lists the
      bottlenext methods in PHPUnit.
    </para>

    <table id="api.assert.tables.bottleneck-methods">
      <title>Bottleneck Methods</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>fail()</primary></indexterm>
            <entry><literal>void fail()</literal></entry>
            <entry>Reports an error.</entry>
          </row>
          <row>
            <entry><literal>void fail(string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal>.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <indexterm><primary>Incomplete Test</primary></indexterm>
      <indexterm><primary>Skipped Test</primary></indexterm>

      <literal>markTestIncomplete()</literal> and <literal>markTestSkipped()</literal>
      are convenience methods for marking a test as being incomplete or skipped.
    </para>

    <table id="api.assert.tables.incomplete-skipped">
      <title>Marking a test as being incomplete or skipped</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>markTestIncomplete()</primary></indexterm>
            <entry><literal>void markTestIncomplete(string $message)</literal></entry>
            <entry>Marks the current test as being incomplete, <literal>$message</literal> is optional.</entry>
          </row>
          <row>
            <indexterm><primary>markTestSkipped()</primary></indexterm>
            <entry><literal>void markTestSkipped(string $message)</literal></entry>
            <entry>Marks the current test as being skipped, <literal>$message</literal> is optional.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      Although unit tests are about testing the public interface of a class, you
      may sometimes want to test the values of non-public attributes. The
      <literal>readAttribute()</literal> method enables you to do this and
      returns the value of a given (static) attribute from a given class or
      object.
    </para>

    <table id="api.assert.tables.readAttribute">
      <title>Accessing non-public attributes</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>readAttribute()</primary></indexterm>
            <entry><literal>Mixed readAttribute($classOrObject, $attributeName)</literal></entry>
            <entry>Returns the value of a given (static) attribute (<literal>$attributeName</literal>) of a class or of an object. This also works for attributes that are declared <literal>protected</literal> or <literal>private</literal>.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="api.test">
    <title>PHPUnit_Framework_Test</title>
    <indexterm><primary>PHPUnit_Framework_Test</primary></indexterm>

    <para>
      <literal>PHPUnit_Framework_Test</literal> is the generic interface
      used by all objects that can act as tests. Implementors may represent
      one or more tests. The two methods are shown in
      <xref linkend="api.test.tables.implementor-methods" />.
    </para>

    <table id="api.test.tables.implementor-methods">
      <title>Implementor Methods</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>int count()</literal></entry>
            <entry>Return the number of tests.</entry>
          </row>
          <row>
            <entry><literal>void run(PHPUnit_Framework_TestResult $result)</literal></entry>
            <entry>Run the tests and report the results on <literal>$result</literal>.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <literal>PHPUnit_Framework_TestCase</literal> and
      <literal>PHPUnit_Framework_TestSuite</literal> are the two most
      prominent implementors of <literal>PHPUnit_Framework_Test</literal>.
      You can implement <literal>PHPUnit_Framework_Test</literal> yourself.
      The interface is kept small intentionally so it will be easy to
      implement.
    </para>
  </section>

  <section id="api.testcase">
    <title>PHPUnit_Framework_TestCase</title>
    <indexterm><primary>PHPUnit_Framework_TestCase</primary></indexterm>

    <para>
      Your test-case classes will inherit from
      <literal>PHPUnit_Framework_TestCase</literal>. Most of the time, you
      will run tests from automatically created test suites. In this case,
      each of your tests should be represented by a method named
      <literal>test*</literal> (by convention).
    </para>

    <para>
      <literal>PHPUnit_Framework_TestCase</literal> implements
      <literal>PHPUnit_Framework_Test::count()</literal> so that it
      always returns <literal>1</literal>. The implementation of
      <literal>PHPUnit_Framework_Test::run(PHPUnit_Framework_TestResult $result)</literal>
      in this class runs <literal>setUp()</literal>, runs the test method,
      and then runs <literal>tearDown()</literal>, reporting any exceptions
      to the <literal>PHPUnit_Framework_TestResult</literal>.
    </para>

    <para>
      <xref linkend="api.testcase.tables.api" /> shows the
      methods provided by <literal>PHPUnit_Framework_TestCase</literal>.
    </para>

    <table id="api.testcase.tables.api">
      <title>TestCase</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>__construct()</literal></entry>
            <entry>Creates a test case.</entry>
          </row>
          <row>
            <entry><literal>__construct(string $name)</literal></entry>
            <entry>Creates a named test case. Names are used to print the test case and often as the name of the test method to be run by reflection.</entry>
          </row>
          <row>
            <entry><literal>string getName()</literal></entry>
            <entry>Return the name of the test case.</entry>
          </row>
          <row>
            <entry><literal>void setName($name)</literal></entry>
            <entry>Set the name of the test case.</entry>
          </row>
          <row>
            <entry><literal>PHPUnit_Framework_TestResult run(PHPUnit_Framework_TestResult $result)</literal></entry>
            <entry>Convenience method to run the test case and report it in <literal>$result</literal>.</entry>
          </row>
          <row>
            <entry><literal>void runTest()</literal></entry>
            <entry>Override with a testing method if you do not want the testing method to be invoked by reflection.</entry>
          </row>
          <row>
            <entry><literal>object getMock($className, [array $methods, [array $arguments, [string $mockClassName, [boolean $callOriginalConstructor, [boolean $callOriginalClone, [boolean $callAutoload]]]]]])</literal></entry>
            <entry>Returns a mock object (see <xref linkend="mock-objects" />) for the specified <literal>$className</literal>. By default, all methods of the given class are mocked. When the second (optional) parameter is provided, only the methods whose names are in the array are mocked. The third (optional) parameter may hold a parameter array that is passed to the mock object's constructor. The fourth (optional) parameter can be used to specify a class name for the mock object. The fifth (optional) parameter can be used to disable the call to the original object's <literal>__construct()</literal> method. The sixth (optional) parameter can be used to disable the call to the original object's <literal>__clone()</literal> method. The seventh (optional) parameter can be used to disable <literal>__autoload()</literal> during mock object creation.</entry>
          </row>
          <row>
            <entry><literal>void iniSet(string $varName, mixed $newValue)</literal></entry>
            <entry>This method is a wrapper for the <ulink url="http://www.php.net/ini_set"><literal>ini_set()</literal></ulink> function that automatically resets the modified <filename>php.ini</filename> setting to its original value after the test is run.</entry>
          </row>
          <row>
            <entry><literal>void setLocale(integer $category, string $locale, ...)</literal></entry>
            <entry>This method is a wrapper for the <ulink url="http://www.php.net/setlocale"><literal>setlocale()</literal></ulink> function that automatically resets the locale to its original value after the test is run.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      There are two template methods -- <literal>setUp()</literal> and
      <literal>tearDown()</literal> -- you can override to create and
      dispose of the objects against which you are going to test.
      <xref linkend="api.testcase.tables.template-methods" /> shows
      these methods. The template methods <literal>assertPreConditions()</literal>
      and <literal>assertPostConditions()</literal> can be used to define
      assertions that should be performed by all tests of a test case class.
    </para>

    <table id="api.testcase.tables.template-methods">
      <title>Template Methods</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>setUp()</primary></indexterm>
            <entry><literal>void setUp()</literal></entry>
            <entry>Override to set up the fixture, for example create an object graph.</entry>
          </row>
          <row>
            <indexterm><primary>assertPreConditions()</primary></indexterm>
            <entry><literal>void assertPreConditions()</literal></entry>
            <entry>Override to perform assertions shared by all tests of a test case class. This method is called before the execution of a test starts and after setUp() is called.</entry>
          </row>
          <row>
            <indexterm><primary>assertPostConditions()</primary></indexterm>
            <entry><literal>void assertPostConditions()</literal></entry>
            <entry>Override to perform assertions shared by all tests of a test case class. This method is called before the execution of a test ends and before tearDown() is called.</entry>
          </row>
          <row>
            <indexterm><primary>tearDown()</primary></indexterm>
            <entry><literal>void tearDown()</literal></entry>
            <entry>Override to tear down the fixture, for example clean up an object graph.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="api.testsuite">
    <title>PHPUnit_Framework_TestSuite</title>
    <indexterm><primary>PHPUnit_Framework_TestSuite</primary></indexterm>

    <para>
      A <literal>PHPUnit_Framework_TestSuite</literal> is a composite of
      <literal>PHPUnit_Framework_Test</literal>s. At its simplest, it
      contains a bunch of test cases, all of which are run when the suite is
      run. Since it is a composite, however, a suite can contain suites which
      can contain suites and so on, making it easy to combine tests from
      various sources and run them together.
    </para>

    <para>
      In addition to the <literal>PHPUnit_Framework_Test</literal> methods --
      <literal>run(PHPUnit_Framework_TestResult $result)</literal> and
      <literal>count()</literal> -- <literal>PHPUnit_Framework_TestSuite</literal>
      provides methods to create named or unnamed instances.
      <xref linkend="api.testsuite.tables.creating-instances" /> shows the
      methods to create <literal>PHPUnit_Framework_TestSuite</literal>
      instances.
    </para>

    <table id="api.testsuite.tables.creating-instances">
      <title>Creating named or unnamed instances</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>__construct()</literal></entry>
            <entry>Return an empty test suite.</entry>
          </row>
          <row>
            <entry><literal>__construct(string $theClass)</literal></entry>
            <entry>Return a test suite containing an instance of the class named <literal>$theClass</literal> for each method in the class named <literal>test*</literal>. If no class of name <literal>$theClass</literal> exists an empty test suite named <literal>$theClass</literal> is returned.</entry>
          </row>
          <row>
            <entry><literal>__construct(string $theClass, string $name)</literal></entry>
            <entry>Return a test suite named <literal>$name</literal> containing an instance of the class named <literal>$theClass</literal> for each method in the class named <literal>test*</literal>.</entry>
          </row>
          <row>
            <entry><literal>__construct(ReflectionClass $theClass)</literal></entry>
            <entry>Return a test suite containing an instance of the class represented by <literal>$theClass</literal> for each method in the class named <literal>test*</literal>.</entry>
          </row>
          <row>
            <entry><literal>__construct(ReflectionClass $theClass, $name)</literal></entry>
            <entry>Return a test suite named <literal>$name</literal> containing an instance of the class represented by <literal>$theClass</literal> for each method in the class named <literal>test*</literal>.</entry>
          </row>
          <row>
            <entry><literal>string getName()</literal></entry>
            <entry>Return the name of the test suite.</entry>
          </row>
          <row>
            <entry><literal>void setName(string $name)</literal></entry>
            <entry>Set the name of the test suite.</entry>
          </row>
          <row>
            <entry><literal>void markTestSuiteSkipped(string $message)</literal></entry>
            <entry>Marks the current test suite as being skipped, <literal>$message</literal> is optional.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <literal>PHPUnit_Framework_TestSuite</literal> also provides methods
      for adding and retrieving <literal>PHPUnit_Framework_Test</literal>s,
      as shown in <xref linkend="api.testsuite.tables.api" />.
    </para>

    <table id="api.testsuite.tables.api">
      <title>Adding and retrieving tests</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>addTestSuite()</primary></indexterm>
            <entry><literal>void addTestSuite(PHPUnit_Framework_TestSuite $suite)</literal></entry>
            <entry>Add another test suite to the test suite.</entry>
          </row>
          <row>
            <entry><literal>void addTestSuite(string $theClass)</literal></entry>
            <entry>Add a test suite containing an instance of the class named <literal>$theClass</literal> for each method in the class named <literal>test*</literal> to the test suite.</entry>
          </row>
          <row>
            <entry><literal>void addTestSuite(ReflectionClass $theClass)</literal></entry>
            <entry>Add a test suite containing an instance of the class represented by <literal>$theClass</literal> for each method in the class named <literal>test*</literal> to the test suite.</entry>
          </row>
          <row>
            <indexterm><primary>addTest()</primary></indexterm>
            <entry><literal>void addTest(PHPUnit_Framework_Test $test)</literal></entry>
            <entry>Add <literal>$test</literal> to the suite.</entry>
          </row>
          <row>
            <indexterm><primary>addTestFile()</primary></indexterm>
            <entry><literal>void addTestFile(string $filename)</literal></entry>
            <entry>Add the tests that are defined in the class(es) of a given sourcefile to the suite.</entry>
          </row>
          <row>
            <indexterm><primary>addTestFiles()</primary></indexterm>
            <entry><literal>void addTestFiles(array $filenames)</literal></entry>
            <entry>Add the tests that are defined in the classes of the given sourcefiles to the suite.</entry>
          </row>
          <row>
            <entry><literal>int testCount()</literal></entry>
            <entry>Return the number of tests directly (not recursively) in this suite.</entry>
          </row>
          <row>
            <entry><literal>PHPUnit_Framework_Test[] tests()</literal></entry>
            <entry>Return the tests directly in this suite.</entry>
          </row>
          <row>
            <entry><literal>PHPUnit_Framework_Test testAt(int $index)</literal></entry>
            <entry>Return the test at the <literal>$index</literal>.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <xref linkend="api.testsuite.examples.TestSuite-example.php" /> shows
      how to create and run a test suite.
    </para>

    <example id="api.testsuite.examples.TestSuite-example.php">
      <title>Creating and running a test suite</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

require_once 'ArrayTest.php';

// Create a test suite that contains the tests
// from the ArrayTest class.
$suite = new PHPUnit_Framework_TestSuite('ArrayTest');

// Run the tests.
$suite->run();
?>]]></programlisting>
    </example>

    <para>
      <xref linkend="organizing-test-suites" /> shows how to use the
      <literal>PHPUnit_Framework_TestSuite</literal> class to
      organize test suites by hierarchically composing test cases.
    </para>

    <para>
      The <literal>PHPUnit_Framework_TestSuite</literal> class provides two
      template methods -- <literal>setUp()</literal> and
      <literal>tearDown()</literal> -- that are called before and after the
      tests of a test suite are run, respectively.
    </para>

    <table id="api.testsuite.tables.template-methods">
      <title>Template Methods</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>setUp()</primary></indexterm>
            <entry><literal>void setUp()</literal></entry>
            <entry>Called before the first test of the test suite is run.</entry>
          </row>
          <row>
            <indexterm><primary>tearDown()</primary></indexterm>
            <entry><literal>void tearDown()</literal></entry>
            <entry>Called after the last test of the test suite has been run.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="api.testresult">
    <title>PHPUnit_Framework_TestResult</title>
    <indexterm><primary>PHPUnit_Framework_TestResult</primary></indexterm>

    <para>
      While you are running all these tests, you need somewhere to store all
      the results: how many tests ran, which failed, and how long they took.
      <literal>PHPUnit_Framework_TestResult</literal> collects these results.
      A single <literal>PHPUnit_Framework_TestResult</literal> is passed
      around the whole tree of tests; when a test runs or fails, the fact is
      noted in the <literal>PHPUnit_Framework_TestResult</literal>. At the
      end of the run, <literal>PHPUnit_Framework_TestResult</literal>
      contains a summary of all the tests.
    </para>

    <para>
      <literal>PHPUnit_Framework_TestResult</literal> is also a subject than
      can be observed by other objects wanting to report test progress. For
      example, a graphical test runner might observe the
      <literal>PHPUnit_Framework_TestResult</literal> and update a progress
      bar every time a test starts.
    </para>

    <para>
      <xref linkend="api.testresult.tables.api" /> summarizes
      the API of <literal>PHPUnit_Framework_TestResult</literal>.
    </para>

    <table id="api.testresult.tables.api">
      <title>TestResult</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void addError(PHPUnit_Framework_Test $test, Exception $e)</literal></entry>
            <entry>Record that running <literal>$test</literal> caused <literal>$e</literal> to be thrown unexpectedly.</entry>
          </row>
          <row>
            <entry><literal>void addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e)</literal></entry>
            <entry>Record that running <literal>$test</literal> caused <literal>$e</literal> to be thrown unexpectedly.</entry>
          </row>
          <row>
            <entry><literal>PHPUnit_Framework_TestFailure[] errors()</literal></entry>
            <entry>Return the errors recorded.</entry>
          </row>
          <row>
            <entry><literal>PHPUnit_Framework_TestFailure[] failures()</literal></entry>
            <entry>Return the failures recorded.</entry>
          </row>
          <row>
            <entry><literal>PHPUnit_Framework_TestFailure[] notImplemented()</literal></entry>
            <entry>Return the incomplete test cases recorded.</entry>
          </row>
          <row>
            <entry><literal>int errorCount()</literal></entry>
            <entry>Return the number of errors.</entry>
          </row>
          <row>
            <entry><literal>int failureCount()</literal></entry>
            <entry>Return the number of failures.</entry>
          </row>
          <row>
            <entry><literal>int notImplementedCount()</literal></entry>
            <entry>Return the number of incomplete test cases.</entry>
          </row>
          <row>
            <entry><literal>int count()</literal></entry>
            <entry>Return the total number of test cases run.</entry>
          </row>
          <row>
            <entry><literal>boolean wasSuccessful()</literal></entry>
            <entry>Return whether or not all tests ran successfully.</entry>
          </row>
          <row>
            <entry><literal>boolean allCompletlyImplemented()</literal></entry>
            <entry>Return whether or not all tests were completely implemented.</entry>
          </row>
          <row>
            <entry><literal>void collectCodeCoverageInformation(bool $flag)</literal></entry>
            <entry>Enables or disables the collection of Code Coverage information.</entry>
          </row>
          <row>
            <entry><literal>array getCodeCoverageInformation()</literal></entry>
            <entry>Return the code coverage information collected.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <indexterm><primary>Observer Pattern</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_TestListener</primary></indexterm>

      If you want to register as an observer of a
      <literal>PHPUnit_Framework_TestResult</literal>, you need to implement
      <literal>PHPUnit_Framework_TestListener</literal>. To register, call
      <literal>addListener()</literal>, as shown in
      <xref linkend="api.testresult.tables.testresult-testlistener" />.
    </para>

    <table id="api.testresult.tables.testresult-testlistener">
      <title>TestResult and TestListener</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void addListener(PHPUnit_Framework_TestListener $listener)</literal></entry>
            <entry>Register <literal>$listener</literal> to receive updates as results are recorded in the test result.</entry>
          </row>
          <row>
            <entry><literal>void removeListener(PHPUnit_Framework_TestListener $listener)</literal></entry>
            <entry>Unregister <literal>$listener</literal> from receiving updates.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <xref linkend="api.testresult.tables.testlistener" /> shows the methods
      that test listeners implement; also see
      <xref linkend="extending-phpunit.examples.SimpleTestListener.php" />.
    </para>

    <table id="api.testresult.tables.testlistener">
      <title>TestListener Callbacks</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void addError(PHPUnit_Framework_Test $test, Exception $e)</literal></entry>
            <entry><literal>$test</literal> has thrown <literal>$e</literal>.</entry>
          </row>
          <row>
            <entry><literal>void addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e)</literal></entry>
            <entry><literal>$test</literal> has failed an assertion, throwing a kind of <literal>PHPUnit_Framework_AssertionFailedError</literal>.</entry>
          </row>
          <row>
            <entry><literal>void addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e)</literal></entry>
            <entry><literal>$test</literal> is an incomplete test.</entry>
          </row>
          <row>
            <entry><literal>void addSkippedTest(PHPUnit_Framework_Test $test, Exception $e)</literal></entry>
            <entry><literal>$test</literal> is a test that has been skipped.</entry>
          </row>
          <row>
            <entry><literal>void startTestSuite(PHPUnit_Framework_TestSuite $suite)</literal></entry>
            <entry><literal>$suite</literal> is about to be run.</entry>
          </row>
          <row>
            <entry><literal>void endTestSuite(PHPUnit_Framework_TestSuite $suite)</literal></entry>
            <entry><literal>$suite</literal> has finished running.</entry>
          </row>
          <row>
            <entry><literal>void startTest(PHPUnit_Framework_Test $test)</literal></entry>
            <entry><literal>$test</literal> is about to be run.</entry>
          </row>
          <row>
            <entry><literal>void endTest(PHPUnit_Framework_Test $test)</literal></entry>
            <entry><literal>$test</literal> has finished running.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="api.package-structure">
    <title>Package Structure</title>

    <para>
      Many of the classes mentioned so far in this book come from
      <literal>PHPUnit/Framework</literal>. Here are all the packages in
      PHPUnit:
    </para>

    <itemizedlist>
      <listitem>
        <para><literal>PHPUnit/Framework</literal></para>

        <para>
          The basic classes in PHPUnit.
        </para>
      </listitem>

      <listitem>
        <para><literal>PHPUnit/Extensions</literal></para>

        <para>
          Extensions to the PHPUnit framework.
        </para>
      </listitem>

      <listitem>
        <para><literal>PHPUnit/Runner</literal></para>

        <para>
          Abstract support for running tests.
        </para>
      </listitem>

      <listitem>
        <para><literal>PHPUnit/TextUI</literal></para>

        <para>
          The text-based test runner.
        </para>
      </listitem>

      <listitem>
        <para><literal>PHPUnit/Util</literal></para>

        <para>
          Utility classes used by the other packages.
        </para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
