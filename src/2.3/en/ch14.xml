<?xml version="1.0" encoding="iso-8859-1" ?>

<chapter id="api">
  <title>PHPUnit API</title>

  <caution>
    <para>
      You are looking at the documentation for a version of PHPUnit that is no
      longer supported.
    </para>

    <para>
      The documentation for the current version of PHPUnit can be found
      <ulink url="../../current/en/index.html">here</ulink>.
    </para>
  </caution>

  <para>
    For most uses, PHPUnit has a simple API: subclass
    <literal>PHPUnit2_Framework_TestCase</literal> for your test cases and
    call <literal>assertTrue()</literal> or <literal>assertEquals()</literal>.
    However, for those of you who would like to look deeper into PHPUnit,
    here are all of its published methods and classes.
  </para>

  <section id="api.overview">
    <title>Overview</title>

    <para>
      Most of the time, you will encounter five classes or interfaces when you
      are using PHPUnit:
    </para>

    <variablelist>
      <varlistentry>
        <term><literal>PHPUnit2_Framework_Assert</literal></term>
        <listitem>
          <para>
          A collection of static methods for checking actual values against
          expected values.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>PHPUnit2_Framework_Test</literal></term>
        <listitem>
          <para>
            The interface of all objects that act like tests.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>PHPUnit2_Framework_TestCase</literal></term>
        <listitem>
          <para>
            A single test.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>PHPUnit2_Framework_TestSuite</literal></term>
        <listitem>
          <para>
            A collection of tests.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>PHPUnit2_Framework_TestResult</literal></term>
        <listitem>
          <para>
            A summary of the results of running one or more tests.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>
      <xref linkend="api.overview.figures.PHPUnit2_Framework.png" />
      shows the relationship of the five basic classes and interfaces
      in PHPUnit: <literal>PHPUnit2_Framework_Assert</literal>,
      <literal>PHPUnit2_Framework_Test</literal>,
      <literal>PHPUnit2_Framework_TestCase</literal>,
      <literal>PHPUnit2_Framework_TestSuite</literal>, and
      <literal>PHPUnit2_Framework_TestResult</literal>.
    </para>

    <figure id="api.overview.figures.PHPUnit2_Framework.png">
      <title>The five basic classes and interfaces in PHPUnit</title>

      <graphic fileref="figures/PHPUnit2_Framework.png" />
    </figure>
  </section>

  <section id="api.assert">
    <title>PHPUnit2_Framework_Assert</title>
    <indexterm><primary>PHPUnit2_Framework_Assert</primary></indexterm>

    <para>
      <indexterm><primary>Assertions</primary></indexterm>
      <indexterm><primary>Design-by-Contract</primary></indexterm>

      Most test cases written for PHPUnit are derived indirectly from the class
      <literal>PHPUnit2_Framework_Assert</literal>, which contains methods for
      automatically checking values and reporting discrepancies. The methods
      are declared static, so you can write design-by-contract style
      assertions in your methods and have them reported through PHPUnit
      (<xref linkend="api.assert.examples.Sample.php" />).
    </para>

    <example id="api.assert.examples.Sample.php">
      <title>Design-by-Contract Style Assertions</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit2/Framework/Assert.php';

class Sample {
    public function aSampleMethod($object) {
        PHPUnit2_Framework_Assert::assertNotNull($object);
    }
}

$sample = new Sample;
$sample->aSampleMethod(NULL);
?>]]></programlisting>

<screen><![CDATA[Fatal error: Uncaught exception 'PHPUnit2_Framework_AssertionFailedError'
with message 'expected: <NOT NULL> but was: <NULL>']]></screen>
    </example>

    <para>
      Most of the time, though, you'll be checking the assertions inside of
      tests.
    </para>

    <para>
      There are two variants of each of the assertion methods: one takes a
      message to be displayed with the error as a parameter, and one does not.
      The optional message is typically displayed when a failure is displayed,
      which can make debugging easier.
    </para>

    <example id="api.assert.examples.MessageTest.php">
      <title>Using assertions with messages</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit2/Framework/TestCase.php';

class MessageTest extends PHPUnit2_Framework_TestCase {
    public function testMessage() {
        $this->assertTrue(FALSE, 'This is a custom message.');
    }
}
?>]]></programlisting>
    </example>

    <para>
      The following example shows the output you get when you run the
      <literal>testMessage()</literal> test from
      <xref linkend="api.assert.examples.MessageTest.php" />, using
      assertions with messages:
    </para>

    <screen><userinput>phpunit MessageTest.php</userinput>
PHPUnit 2.3.0 by Sebastian Bergmann.

F

Time: 0.102507
There was 1 failure:
1) testMessage(MessageTest)
This is a custom message.

FAILURES!!!
Tests run: 1, Failures: 1, Errors: 0, Incomplete Tests: 0.</screen>

    <para>
      <xref linkend="api.assert.tables.assertions" /> shows all the varieties
      of assertions.
    </para>

    <table id="api.assert.tables.assertions">
      <title>Assertions</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Assertion</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void assertTrue(bool $condition)</literal></entry>
            <entry>Reports an error if <literal>$condition</literal> is <literal>FALSE</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertTrue(bool $condition, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$condition</literal> is <literal>FALSE</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertFalse(bool $condition)</literal></entry>
            <entry>Reports an error if <literal>$condition</literal> is <literal>TRUE</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertFalse(bool $condition, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$condition</literal> is <literal>TRUE</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNull(mixed $variable)</literal></entry>
            <entry>Reports an error if <literal>$variable</literal> is not <literal>NULL</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNull(mixed $variable, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$variable</literal> is not <literal>NULL</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotNull(mixed $variable)</literal></entry>
            <entry>Reports an error if <literal>$variable</literal> is <literal>NULL</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotNull(mixed $variable, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$variable</literal> is <literal>NULL</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertSame(object $expected, object $actual)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actual</literal> do not reference the same object.</entry>
          </row>
          <row>
            <entry><literal>void assertSame(object $expected, object $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> do not reference the same object.</entry>
          </row>
          <row>
            <entry><literal>void assertSame(mixed $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actual</literal> do not have the same type and value.</entry>
          </row>
          <row>
            <entry><literal>void assertSame(mixed $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> do not have the same type and value.</entry>
          </row>
          <row>
            <entry><literal>void assertNotSame(object $expected, object $actual)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actual</literal> reference the same object.</entry>
          </row>
          <row>
            <entry><literal>void assertNotSame(object $expected, object $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> reference the same object.</entry>
          </row>
          <row>
            <entry><literal>void assertNotSame(mixed $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actual</literal> have the same type and value.</entry>
          </row>
          <row>
            <entry><literal>void assertNotSame(mixed $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> have the same type and value.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(array $expected, array $actual)</literal></entry>
            <entry>Reports an error if the two arrays <literal>$expected</literal> and <literal>$actual</literal> are not equal.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(array $expected, array $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two arrays <literal>$expected</literal> and <literal>$actual</literal> are not equal.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(array $expected, array $actual)</literal></entry>
            <entry>Reports an error if the two arrays <literal>$expected</literal> and <literal>$actual</literal> are equal.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(array $expected, array $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two arrays <literal>$expected</literal> and <literal>$actual</literal> are equal.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(float $expected, float $actual, '', float $delta = 0)</literal></entry>
            <entry>Reports an error if the two floats <literal>$expected</literal> and <literal>$actual</literal> are not within <literal>$delta</literal> of each other.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(float $expected, float $actual, string $message, float $delta = 0)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two floats <literal>$expected</literal> and <literal>$actual</literal> are not within <literal>$delta</literal> of each other.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(float $expected, float $actual, '', float $delta = 0)</literal></entry>
            <entry>Reports an error if the two floats <literal>$expected</literal> and <literal>$actual</literal> are within <literal>$delta</literal> of each other.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(float $expected, float $actual, string $message, float $delta = 0)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two floats <literal>$expected</literal> and <literal>$actual</literal> are within <literal>$delta</literal> of each other.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(string $expected, string $actual)</literal></entry>
            <entry>Reports an error if the two strings <literal>$expected</literal> and <literal>$actual</literal> are not equal. The error is reported as the delta between the two strings.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(string $expected, string $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two strings <literal>$expected</literal> and <literal>$actual</literal> are not equal. The error is reported as the delta between the two strings.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(string $expected, string $actual)</literal></entry>
            <entry>Reports an error if the two strings <literal>$expected</literal> and <literal>$actual</literal> are equal.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(string $expected, string $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two strings <literal>$expected</literal> and <literal>$actual</literal> are equal.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(mixed $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actual</literal> are not equal.</entry>
          </row>
          <row>
            <entry><literal>void assertEquals(mixed $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> are not equal.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(mixed $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the two variables <literal>$expected</literal> and <literal>$actual</literal> are equal.</entry>
          </row>
          <row>
            <entry><literal>void assertNotEquals(mixed $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> are equal.</entry>
          </row>
          <row>
            <entry><literal>void assertContains(mixed $needle, array $haystack)</literal></entry>
            <entry>Reports an error if <literal>$needle</literal> is not an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertContains(mixed $needle, array $haystack, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is not an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotContains(mixed $needle, array $haystack)</literal></entry>
            <entry>Reports an error if <literal>$needle</literal> is an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotContains(mixed $needle, array $haystack, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertContains(mixed $needle, Iterator $haystack)</literal></entry>
            <entry>Reports an error if <literal>$needle</literal> is not an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertContains(mixed $needle, Iterator $haystack, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is not an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotContains(mixed $needle, Iterator $haystack)</literal></entry>
            <entry>Reports an error if <literal>$needle</literal> is an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotContains(mixed $needle, Iterator $haystack, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is an element of <literal>$haystack</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertRegExp(string $pattern, string $string)</literal></entry>
            <entry>Reports an error if <literal>$string</literal> does not match the regular expression <literal>$pattern</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertRegExp(string $pattern, string $string, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$string</literal> does not match the regular expression <literal>$pattern</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotRegExp(string $pattern, string $string)</literal></entry>
            <entry>Reports an error if <literal>$string</literal> matches the regular expression <literal>$pattern</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotRegExp(string $pattern, string $string, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if <literal>$string</literal> matches the regular expression <literal>$pattern</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertType(string $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the variable <literal>$actual</literal> is not of type <literal>$expected</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertType(string $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the variable <literal>$actual</literal> is not of type <literal>$expected</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotType(string $expected, mixed $actual)</literal></entry>
            <entry>Reports an error if the variable <literal>$actual</literal> is of type <literal>$expected</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertNotType(string $expected, mixed $actual, string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal> if the variable <literal>$actual</literal> is of type <literal>$expected</literal>.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      You may find that you need other assertions than these to compare
      objects specific to your project. Create your own <literal>Assert</literal>
      class to contain these assertions to simplify your tests.
    </para>

    <para>
      Failing assertions all call a single bottleneck method,
      <literal>fail(string $message)</literal>, which throws an
      <literal>PHPUnit2_Framework_AssertionFailedError</literal>. There is
      also a variant which takes no parameters. Call <literal>fail()</literal>
      explicitly when your test encounters an error. The test for an expected
      exception is an example.
      <xref linkend="api.assert.tables.bottleneck-methods" /> lists the
      bottlenext methods in PHPUnit.
    </para>

    <table id="api.assert.tables.bottleneck-methods">
      <title>Bottleneck Methods</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void fail()</literal></entry>
            <entry>Reports an error.</entry>
          </row>
          <row>
            <entry><literal>void fail(string $message)</literal></entry>
            <entry>Reports an error identified by <literal>$message</literal>.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="api.test">
    <title>PHPUnit2_Framework_Test</title>
    <indexterm><primary>PHPUnit2_Framework_Test</primary></indexterm>

    <para>
      <literal>PHPUnit2_Framework_Test</literal> is the generic interface
      used by all objects that can act as tests. Implementors may represent
      one or more tests. The two methods are shown in
      <xref linkend="api.test.tables.implementor-methods" />.
    </para>

    <table id="api.test.tables.implementor-methods">
      <title>Implementor Methods</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>int countTestCases()</literal></entry>
            <entry>Return the number of tests.</entry>
          </row>
          <row>
            <entry><literal>void run(PHPUnit2_Framework_TestResult $result)</literal></entry>
            <entry>Run the tests and report the results on <literal>$result</literal>.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <literal>PHPUnit2_Framework_TestCase</literal> and
      <literal>PHPUnit2_Framework_TestSuite</literal> are the two most
      prominent implementors of <literal>PHPUnit2_Framework_Test</literal>.
      You can implement <literal>PHPUnit2_Framework_Test</literal> yourself.
      The interface is kept small intentionally so it will be easy to
      implement.
    </para>
  </section>

  <section id="api.testcase">
    <title>PHPUnit2_Framework_TestCase</title>
    <indexterm><primary>PHPUnit2_Framework_TestCase</primary></indexterm>

    <para>
      Your test-case classes will inherit from
      <literal>PHPUnit2_Framework_TestCase</literal>. Most of the time, you
      will run tests from automatically created test suites. In this case,
      each of your tests should be represented by a method named
      <literal>test*</literal> (by convention).
    </para>

    <para>
      <literal>PHPUnit2_Framework_TestCase</literal> implements
      <literal>PHPUnit2_Framework_Test::countTestCases()</literal> so that it
      always returns <literal>1</literal>. The implementation of
      <literal>PHPUnit2_Framework_Test::run(PHPUnit2_Framework_TestResult $result)</literal>
      in this class runs <literal>setUp()</literal>, runs the test method,
      and then runs <literal>tearDown()</literal>, reporting any exceptions
      to the <literal>PHPUnit2_Framework_TestResult</literal>.
    </para>

    <para>
      <xref linkend="api.testcase.tables.external-protocols" /> shows the
      external protocol implemented by <literal>PHPUnit2_Framework_TestCase</literal>.
    </para>

    <table id="api.testcase.tables.external-protocols">
      <title>TestCase external protocols</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>__construct()</literal></entry>
            <entry>Creates a test case.</entry>
          </row>
          <row>
            <entry><literal>__construct(string $name)</literal></entry>
            <entry>Creates a named test case. Names are used to print the test case and often as the name of the test method to be run by reflection.</entry>
          </row>
          <row>
            <entry><literal>string getName()</literal></entry>
            <entry>Return the name of the test case.</entry>
          </row>
          <row>
            <entry><literal>void setName($name)</literal></entry>
            <entry>Set the name of the test case.</entry>
          </row>
          <row>
            <entry><literal>PHPUnit2_Framework_TestResult run(PHPUnit2_Framework_TestResult $result)</literal></entry>
            <entry>Convenience method to run the test case and report it in <literal>$result</literal>.</entry>
          </row>
          <row>
            <entry><literal>void runTest()</literal></entry>
            <entry>Override with a testing method if you do not want the testing method to be invoked by reflection.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      There are two template methods -- <literal>setUp()</literal> and
      <literal>tearDown()</literal> -- you can override to create and
      dispose of the objects against which you are going to test.
      <xref linkend="api.testcase.tables.template-methods" /> shows
      these methods.
    </para>

    <table id="api.testcase.tables.template-methods">
      <title>Template Methods</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void setUp()</literal></entry>
            <entry>Override to create objects against which to test. Each test that runs will be run in its own test case, and <literal>setUp()</literal> will be called separately for each one.</entry>
          </row>
          <row>
            <entry><literal>void tearDown()</literal></entry>
            <entry>Override to dispose of objects no longer needed once the test has finished. In general, you only need to explicitly dispose of external resources (files or sockets, for example) in <literal>tearDown()</literal>.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="api.testsuite">
    <title>PHPUnit2_Framework_TestSuite</title>
    <indexterm><primary>PHPUnit2_Framework_TestSuite</primary></indexterm>

    <para>
      A <literal>PHPUnit2_Framework_TestSuite</literal> is a composite of
      <literal>PHPUnit2_Framework_Test</literal>s. At its simplest, it
      contains a bunch of test cases, all of which are run when the suite is
      run. Since it is a composite, however, a suite can contain suites which
      can contain suites and so on, making it easy to combine tests from
      various sources and run them together.
    </para>

    <para>
      In addition to the <literal>PHPUnit2_Framework_Test</literal> protocol --
      <literal>run(PHPUnit2_Framework_TestResult $result)</literal> and
      <literal>countTestCases()</literal> -- <literal>PHPUnit2_Framework_TestSuite</literal>
      contains protocol to create named or unnamed instances.
      <xref linkend="api.testsuite.tables.creating-instances" /> shows the
      instance creation protocol for <literal>PHPUnit2_Framework_TestSuite</literal>.
    </para>

    <table id="api.testsuite.tables.creating-instances">
      <title>Creating named or unnamed instances</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>__construct()</literal></entry>
            <entry>Return an empty test suite.</entry>
          </row>
          <row>
            <entry><literal>__construct(string $theClass)</literal></entry>
            <entry>Return a test suite containing an instance of the class named <literal>$theClass</literal> for each method in the class named <literal>test*</literal>. If no class of name <literal>$theClass</literal> exists an empty test suite named <literal>$theClass</literal> is returned.</entry>
          </row>
          <row>
            <entry><literal>__construct(string $theClass, string $name)</literal></entry>
            <entry>Return a test suite named <literal>$name</literal> containing an instance of the class named <literal>$theClass</literal> for each method in the class named <literal>test*</literal>.</entry>
          </row>
          <row>
            <entry><literal>__construct(ReflectionClass $theClass)</literal></entry>
            <entry>Return a test suite containing an instance of the class represented by <literal>$theClass</literal> for each method in the class named <literal>test*</literal>.</entry>
          </row>
          <row>
            <entry><literal>__construct(ReflectionClass $theClass, $name)</literal></entry>
            <entry>Return a test suite named <literal>$name</literal> containing an instance of the class represented by <literal>$theClass</literal> for each method in the class named <literal>test*</literal>.</entry>
          </row>
          <row>
            <entry><literal>string getName()</literal></entry>
            <entry>Return the name of the test suite.</entry>
          </row>
          <row>
            <entry><literal>void setName(string $name)</literal></entry>
            <entry>Set the name of the test suite.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <literal>PHPUnit2_Framework_TestSuite</literal> also contains protocol
      for adding and retrieving <literal>PHPUnit2_Framework_Test</literal>s,
      as shown in <xref linkend="api.testsuite.tables.protocol" />.
    </para>

    <table id="api.testsuite.tables.protocol">
      <title>Protocol for adding and retrieving tests</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void addTest(PHPUnit2_Framework_Test $test)</literal></entry>
            <entry>Add <literal>$test</literal> to the suite.</entry>
          </row>
          <row>
            <entry><literal>void addTestFile(string $filename)</literal></entry>
            <entry>Add the tests that are defined in the class(es) of a given sourcefile to the suite.</entry>
          </row>
          <row>
            <entry><literal>void addTestFiles(array $filenames)</literal></entry>
            <entry>Add the tests that are defined in the classes of the given sourcefiles to the suite.</entry>
          </row>
          <row>
            <entry><literal>int testCount()</literal></entry>
            <entry>Return the number of tests directly (not recursively) in this suite.</entry>
          </row>
          <row>
            <entry><literal>PHPUnit2_Framework_Test[] tests()</literal></entry>
            <entry>Return the tests directly in this suite.</entry>
          </row>
          <row>
            <entry><literal>PHPUnit2_Framework_Test testAt(int $index)</literal></entry>
            <entry>Return the test at the <literal>$index</literal>.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <xref linkend="api.testsuite.examples.TestSuite-example.php" /> shows
      how to create and run a test suite.
    </para>

    <example id="api.testsuite.examples.TestSuite-example.php">
      <title>Creating and running a test suite</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit2/Framework/TestSuite.php';

require_once 'ArrayTest.php';

// Create a test suite that contains the tests
// from the ArrayTest class.
$suite = new PHPUnit2_Framework_TestSuite('ArrayTest');

// Run the tests.
$suite->run();
?>]]></programlisting>
    </example>

    <para>
      For an example on how to use <literal>PHPUnit2_Framework_TestSuite</literal>
      to hierarchically compose test cases let us look at PHPUnit's own test
      suite.
    </para>

    <para>
      <xref linkend="api.testsuite.examples.AllTests.php" /> shows a cut-down
      version of <filename>Tests/AllTests.php</filename>,
      <xref linkend="api.testsuite.examples.Framework_AllTests.php" /> a
      cut-down version of <filename>Tests/Framework/AllTests.php</filename>.
    </para>

    <example id="api.testsuite.examples.AllTests.php">
      <title>The AllTests class</title>
      <programlisting><![CDATA[<?php
if (!defined('PHPUnit2_MAIN_METHOD')) {
    define('PHPUnit2_MAIN_METHOD', 'AllTests::main');
}

require_once 'PHPUnit2/Framework/TestSuite.php';
require_once 'PHPUnit2/TextUI/TestRunner.php';

require_once 'Framework/AllTests.php';
// ...

class AllTests {
    public static function main() {
        PHPUnit2_TextUI_TestRunner::run(self::suite());
    }

    public static function suite() {
        $suite = new PHPUnit2_Framework_TestSuite('PHPUnit');

        $suite->addTest(Framework_AllTests::suite());
        // ...

        return $suite;
    }
}

if (PHPUnit2_MAIN_METHOD == 'AllTests::main') {
    AllTests::main();
}
?>]]></programlisting>
    </example>

    <example id="api.testsuite.examples.Framework_AllTests.php">
      <title>The Framework_AllTests class</title>
      <programlisting><![CDATA[<?php
if (!defined('PHPUnit2_MAIN_METHOD')) {
    define('PHPUnit2_MAIN_METHOD', 'Framework_AllTests::main');
}

require_once 'PHPUnit2/Framework/TestSuite.php';
require_once 'PHPUnit2/TextUI/TestRunner.php';

require_once 'Framework/AssertTest.php';
// ...

class Framework_AllTests {
    public static function main() {
        PHPUnit2_TextUI_TestRunner::run(self::suite());
    }

    public static function suite() {
        $suite = new PHPUnit2_Framework_TestSuite('PHPUnit Framework');

        $suite->addTestSuite('Framework_AssertTest');
        // ...

        return $suite;
    }
}

if (PHPUnit2_MAIN_METHOD == 'Framework_AllTests::main') {
    Framework_AllTests::main();
}
?>]]></programlisting>
    </example>

    <para>
      The <literal>Framework_AssertTest</literal> class is a standard test case
      that extends <literal>PHPUnit2_Framework_TestCase</literal>.
    </para>

    <para>
      Running <filename>Tests/AllTests.php</filename> uses the TextUI
      test runner to run all tests while running
      <filename>Tests/Framework/AllTests.php</filename> runs only the tests
      for the <literal>PHPUnit2_Framework_*</literal> classes.
    </para>

    <para>
      This example shows the PHPUnit test suite running:
    </para>

    <screen><userinput>php AllTests.php</userinput>
PHPUnit 2.3.0 by Sebastian Bergmann.

.........................................
.........................................
.......

Time: 4.642600

OK (89 tests)</screen>
  </section>

  <section id="api.testresult">
    <title>PHPUnit2_Framework_TestResult</title>
    <indexterm><primary>PHPUnit2_Framework_TestResult</primary></indexterm>

    <para>
      While you are running all these tests, you need somewhere to store all
      the results: how many tests ran, which failed, and how long they took.
      <literal>PHPUnit2_Framework_TestResult</literal> collects these results.
      A single <literal>PHPUnit2_Framework_TestResult</literal> is passed
      around the whole tree of tests; when a test runs or fails, the fact is
      noted in the <literal>PHPUnit2_Framework_TestResult</literal>. At the
      end of the run, <literal>PHPUnit2_Framework_TestResult</literal>
      contains a summary of all the tests.
    </para>

    <para>
      <literal>PHPUnit2_Framework_TestResult</literal> is also a subject than
      can be observed by other objects wanting to report test progress. For
      example, a graphical test runner might observe the
      <literal>PHPUnit2_Framework_TestResult</literal> and update a progress
      bar every time a test starts.
    </para>

    <para>
      <xref linkend="api.testresult.tables.external-protocols" /> summarizes
      the external protocols of <literal>PHPUnit2_Framework_TestResult</literal>.
    </para>

    <table id="api.testresult.tables.external-protocols">
      <title>TestResult external protocols</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void addError(PHPUnit2_Framework_Test $test, Exception $e)</literal></entry>
            <entry>Record that running <literal>$test</literal> caused <literal>$e</literal> to be thrown unexpectedly.</entry>
          </row>
          <row>
            <entry><literal>void addFailure(PHPUnit2_Framework_Test $test, PHPUnit2_Framework_AssertionFailedError $e)</literal></entry>
            <entry>Record that running <literal>$test</literal> caused <literal>$e</literal> to be thrown unexpectedly.</entry>
          </row>
          <row>
            <entry><literal>PHPUnit2_Framework_TestFailure[] errors()</literal></entry>
            <entry>Return the errors recorded.</entry>
          </row>
          <row>
            <entry><literal>PHPUnit2_Framework_TestFailure[] failures()</literal></entry>
            <entry>Return the failures recorded.</entry>
          </row>
          <row>
            <entry><literal>PHPUnit2_Framework_TestFailure[] notImplemented()</literal></entry>
            <entry>Return the incomplete test cases recorded.</entry>
          </row>
          <row>
            <entry><literal>int errorCount()</literal></entry>
            <entry>Return the number of errors.</entry>
          </row>
          <row>
            <entry><literal>int failureCount()</literal></entry>
            <entry>Return the number of failures.</entry>
          </row>
          <row>
            <entry><literal>int notImplementedCount()</literal></entry>
            <entry>Return the number of incomplete test cases.</entry>
          </row>
          <row>
            <entry><literal>int runCount()</literal></entry>
            <entry>Return the total number of test cases run.</entry>
          </row>
          <row>
            <entry><literal>boolean wasSuccessful()</literal></entry>
            <entry>Return whether or not all tests ran successfully.</entry>
          </row>
          <row>
            <entry><literal>boolean allCompletlyImplemented()</literal></entry>
            <entry>Return whether or not all tests were completely implemented.</entry>
          </row>
          <row>
            <entry><literal>void collectCodeCoverageInformation(bool $flag)</literal></entry>
            <entry>Enables or disables the collection of Code Coverage information.</entry>
          </row>
          <row>
            <entry><literal>array getCodeCoverageInformation()</literal></entry>
            <entry>Return the code coverage information collected.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <indexterm><primary>Observer Pattern</primary></indexterm>
      <indexterm><primary>PHPUnit2_Framework_TestListener</primary></indexterm>

      If you want to register as an observer of a
      <literal>PHPUnit2_Framework_TestResult</literal>, you need to implement
      <literal>PHPUnit2_Framework_TestListener</literal>. To register, call
      <literal>addListener()</literal>, as shown in
      <xref linkend="api.testresult.tables.testresult-testlistener" />.
    </para>

    <table id="api.testresult.tables.testresult-testlistener">
      <title>TestResult and TestListener</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void addListener(PHPUnit2_Framework_TestListener $listener)</literal></entry>
            <entry>Register <literal>$listener</literal> to receive updates as results are recorded in the test result.</entry>
          </row>
          <row>
            <entry><literal>void removeListener(PHPUnit2_Framework_TestListener $listener)</literal></entry>
            <entry>Unregister <literal>$listener</literal> from receiving updates.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <xref linkend="api.testresult.tables.testlistener" /> shows the methods
      that test listeners implement; also see
      <xref linkend="extending-phpunit.examples.SimpleTestListener.php" />.
    </para>

    <table id="api.testresult.tables.testlistener">
      <title>TestListener Callbacks</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void addError(PHPUnit2_Framework_Test $test, Exception $e)</literal></entry>
            <entry><literal>$test</literal> has thrown <literal>$e</literal>.</entry>
          </row>
          <row>
            <entry><literal>void addFailure(PHPUnit2_Framework_Test $test, PHPUnit2_Framework_AssertionFailedError $e)</literal></entry>
            <entry><literal>$test</literal> has failed an assertion, throwing a kind of <literal>PHPUnit2_Framework_AssertionFailedError</literal>.</entry>
          </row>
          <row>
            <entry><literal>void addIncompleteTest(PHPUnit2_Framework_Test $test, Exception $e)</literal></entry>
            <entry><literal>$test</literal> is an incomplete test.</entry>
          </row>
          <row>
            <entry><literal>void startTestSuite(PHPUnit2_Framework_TestSuite $suite)</literal></entry>
            <entry><literal>$suite</literal> is about to be run.</entry>
          </row>
          <row>
            <entry><literal>void endTestSuite(PHPUnit2_Framework_TestSuite $suite)</literal></entry>
            <entry><literal>$suite</literal> has finished running.</entry>
          </row>
          <row>
            <entry><literal>void startTest(PHPUnit2_Framework_Test $test)</literal></entry>
            <entry><literal>$test</literal> is about to be run.</entry>
          </row>
          <row>
            <entry><literal>void endTest(PHPUnit2_Framework_Test $test)</literal></entry>
            <entry><literal>$test</literal> has finished running.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="api.package-structure">
    <title>Package Structure</title>

    <para>
      Many of the classes mentioned so far in this book come from
      <literal>PHPUnit2/Framework</literal>. Here are all the packages in
      PHPUnit:
    </para>

    <itemizedlist>
      <listitem>
        <para><literal>PHPUnit2/Framework</literal></para>

        <para>
          The basic classes in PHPUnit.
        </para>
      </listitem>

      <listitem>
        <para><literal>PHPUnit2/Extensions</literal></para>

        <para>
          Extensions to the PHPUnit framework.
        </para>
      </listitem>

      <listitem>
        <para><literal>PHPUnit2/Runner</literal></para>

        <para>
          Abstract support for running tests.
        </para>
      </listitem>

      <listitem>
        <para><literal>PHPUnit2/TextUI</literal></para>

        <para>
          The text-based test runner.
        </para>
      </listitem>

      <listitem>
        <para><literal>PHPUnit2/Util</literal></para>

        <para>
          Utility classes used by the other packages.
        </para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
