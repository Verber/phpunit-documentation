<?xml version="1.0" encoding="iso-8859-1" ?>

<chapter id="code-coverage-analysis">
  <title>Code-Coverage Analysis</title>

  <caution>
    <para>
      You are looking at the documentation for a version of PHPUnit that is no
      longer supported.
    </para>

    <para>
      The documentation for the current version of PHPUnit can be found
      <ulink url="../../current/en/index.html">here</ulink>.
    </para>
  </caution>

  <para>
    You have learned how to use unit tests to test your code. But how do you
    test your tests? How do you find code that is not yet tested -- or, in
    other words, not yet <emphasis>covered</emphasis> by a test? How do you
    measure testing completeness? All these questions are answered by a
    practice called Code-Coverage Analysis. Code-Coverage Analysis gives you
    an insight into what parts of the production code are executed when the
    tests are run.
  </para>

  <para>
    <indexterm><primary>Code-Coverage</primary></indexterm>

    PHPUnit's Code-Coverage Analysis utilizes the statement coverage
    functionality provided by the <ulink url="http://www.xdebug.org/">Xdebug</ulink>
    extension. An example of what statement coverage means is that if there is
    a method with 100 lines of code, and only 75 of these lines are actually
    executed when tests are being run, then the method is considered to have a
    code coverage of 75 percent.
  </para>

  <para>
    <xref linkend="code-coverage-analysis.figures.CodeCoverage.png" /> shows
    a code-coverage report for the <literal>BankAccount</literal> class (from
    <xref linkend="test-first-programming.bankaccount-example.examples.BankAccount2.php" />)
    in HTML format generated by the PHPUnit command-line test runner's
    <literal>--coverage-html</literal> switch. Executable code lines are
    black; non-executable code lines are gray. Code lines that are actually
    executed are highlighted.
  </para>

  <figure id="code-coverage-analysis.figures.CodeCoverage.png">
    <title>The BankAccount class, not completeley covered by tests</title>

    <graphic fileref="figures/CodeCoverage.png" />
  </figure>

  <para>
    The code-coverage report shows that we need to write tests that call
    <literal>setBalance()</literal>, <literal>depositMoney()</literal>, and
    <literal>withdrawMoney()</literal> with legal values in order to achieve
    complete code-coverage.
    <xref linkend="code-coverage-analysis.examples.BankAccountTest.php" />
    shows tests that need to be added to the <literal>BankAccountTest</literal>
    test-case class to completely cover the <literal>BankAccount</literal>
    class.
  </para>

  <example id="code-coverage-analysis.examples.BankAccountTest.php">
    <title>The BankAccount class, completeley covered by tests</title>
    <programlisting><![CDATA[<?php
require_once 'PHPUnit2/Framework/TestCase.php';
require_once 'BankAccount.php';

class BankAccountTest extends PHPUnit2_Framework_TestCase {
    // ...

    public function testSetBalance() {
        $this->ba->setBalance(1);
        $this->assertEquals(1, $this->ba->getBalance());
    }

    public function testDepositAndWidthdrawMoney() {
        $this->ba->depositMoney(1);
        $this->assertEquals(1, $this->ba->getBalance());

        $this->ba->withdrawMoney(1);
        $this->assertEquals(0, $this->ba->getBalance());
    }
}
?>]]></programlisting>
  </example>

  <para>
    In <xref linkend="code-coverage-analysis.figures.CodeCoverage2.png" />,
    we see that the <literal>BankAccount</literal> class is now completely
    covered by tests.
  </para>

  <figure id="code-coverage-analysis.figures.CodeCoverage2.png">
    <title>The BankAccount class is completely covered by tests</title>

    <graphic fileref="figures/CodeCoverage2.png" />
  </figure>

  <para>
    In <xref linkend="phing" /> you will learn how to use Phing to generate
    more detailed code-coverage reports.
  </para>
</chapter>
