<?xml version="1.0" encoding="utf-8" ?>

<chapter id="extending-phpunit">
  <title>PHPUnit の拡張</title>

  <caution>
    <para>
      このドキュメントは、すでにサポートが終了したバージョンの PHPUnit に関するものです。
    </para>

    <para>
      最新版の PHPUnit のドキュメントは
      <ulink url="../../current/ja/index.html">こちら</ulink>にあります。
    </para>
  </caution>

  <para>
    テストを書きやすくする、あるいはテストの実行結果の表示方法を変更するなど、
    PHPUnit はさまざまな方法で拡張することができます。
    PHPUnit を拡張するための第一歩をここで説明します。
  </para>

  <section id="extending-phpunit.PHPUnit2_Framework_TestCase">
    <title>PHPUnit2_Framework_TestCase のサブクラスの作成</title>

    <para>
      <indexterm><primary>PHPUnit2_Framework_TestCase</primary></indexterm>

      <literal>PHPUnit2_Framework_TestCase</literal>
      を継承した抽象サブクラスにユーティリティメソッドを書き、
      そのクラスをさらに継承してテストクラスを作成します。
      これが、PHPUnit を拡張するための一番簡単な方法です。
    </para>
  </section>

  <section id="extending-phpunit.Assert">
    <title>アサートクラスの作成</title>

    <para>
      <indexterm><primary>PHPUnit2_Framework_Assert</primary></indexterm>
      <indexterm><primary>Assertions (アサーション)</primary></indexterm>

      あなたの目的に合った独自のアサーションを実装したクラスを作成します。
    </para>
  </section>

  <section id="extending-phpunit.PHPUnit2_Extensions_TestDecorator">
    <title>PHPUnit2_Extensions_TestDecorator のサブクラスの作成</title>

    <para>
      <indexterm><primary>PHPUnit2_Extensions_TestDecorator</primary></indexterm>

      <literal>PHPUnit2_Extensions_TestDecorator</literal>
      のサブクラスでテストケースあるいはテストスイートをラッピングし、
      デコレータパターンを使用することで
      各テストの実行前後に何らかの処理をさせることができます。
    </para>

    <para>
      <indexterm><primary>PHPUnit2_Extensions_RepeatedTest</primary></indexterm>
      <indexterm><primary>PHPUnit2_Extensions_TestSetup</primary></indexterm>

      PHPUnit には、<literal>PHPUnit2_Extensions_RepeatedTest</literal>
      および <literal>PHPUnit2_Extensions_TestSetup</literal>
      という 2 つの具象テストデコレータが付属しています。
      前者はテストを繰り返し実行し、それらが全て成功した場合にのみ成功とみなします。
      後者については <xref linkend="fixtures" /> で説明しました。
    </para>

    <para>
      <xref linkend="extending-phpunit.examples.RepeatedTest.php" />
      は、テストデコレータ <literal>PHPUnit2_Extensions_RepeatedTest</literal>
      の一部を抜粋したものです。独自のデコレータを作成するための参考にしてください。
    </para>

    <example id="extending-phpunit.examples.RepeatedTest.php">
      <title>RepeatedTest デコレータ</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit2/Extensions/TestDecorator.php';

class PHPUnit2_Extensions_RepeatedTest extends PHPUnit2_Extensions_TestDecorator {
    private $timesRepeat = 1;

    public function __construct(PHPUnit2_Framework_Test $test, $timesRepeat = 1) {
        parent::__construct($test);

        if (is_integer($timesRepeat) &&
            $timesRepeat >= 0) {
            $this->timesRepeat = $timesRepeat;
        }
    }

    public function countTestCases() {
        return $this->timesRepeat * $this->test->countTestCases();
    }

    public function run($result = NULL) {
        if ($result === NULL) {
            $result = $this->createResult();
        }

        for ($i = 0; $i < $this->timesRepeat && !$result->shouldStop(); $i++) {
            $this->test->run($result);
        }

        return $result;
    }
}
?>]]></programlisting>
    </example>
  </section>

  <section id="extending-phpunit.PHPUnit2_Framework_Test">
    <title>PHPUnit2_Framework_Test を実装する</title>

    <para>
      <indexterm><primary>PHPUnit2_Framework_Test</primary></indexterm>
      <indexterm><primary>Data-Driven Tests (データ駆動のテスト)</primary></indexterm>

      <literal>PHPUnit2_Framework_Test</literal> インターフェイスの機能は限られており、
      実装するのは簡単です。<literal>PHPUnit2_Framework_Test</literal>
      を実装するのは <literal>PHPUnit2_Framework_TestCase</literal> の実装より単純で、
      これを用いて例えば <emphasis>データ駆動のテスト (data-driven tests)</emphasis>
      などを実行します。
    </para>

    <para>
      カンマ区切り (CSV) ファイルの値と比較する、データ駆動のテストを
      <xref linkend="extending-phpunit.examples.DataDrivenTest.php" />
      に示します。このファイルの各行は <literal>foo;bar</literal>
      のような形式になっており (訳注: CSV じゃない……)、
      最初の値が期待値で 2 番目の値が実際の値です。
    </para>

    <example id="extending-phpunit.examples.DataDrivenTest.php">
      <title>データ駆動のテスト</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit2/Framework/Assert.php';
require_once 'PHPUnit2/Framework/Test.php';
require_once 'PHPUnit2/Framework/TestResult.php';

class DataDrivenTest implements PHPUnit2_Framework_Test {
    private $lines;

    public function __construct($dataFile) {
        $this->lines = file($dataFile);
    }

    public function countTestCases() {
        return sizeof($this->lines);
    }

    public function run($result = NULL) {
        if ($result === NULL) {
            $result = new PHPUnit2_Framework_TestResult;
        }

        $result->startTest($this);

        foreach ($this->lines as $line) {
            list($expected, $actual) = explode(';', $line);

            try {
                PHPUnit2_Framework_Assert::assertEquals(trim($expected), trim($actual));
            }

            catch (PHPUnit2_Framework_ComparisonFailure $e) {
                $result->addFailure($this, $e);
            }

            catch (Exception $e) {
                $result->addError($this, $e);
            }
        }

        $result->endTest($this);

        return $result;
    }
}

$test   = new DataDrivenTest('data_file.csv');
$result = $test->run();

$failures = $result->failures();
print $failures[0]->thrownException()->toString();
?>]]></programlisting>

      <screen><![CDATA[expected: <foo> but was: <bar>]]></screen>
    </example>
  </section>

  <section id="extending-phpunit.PHPUnit2_Framework_TestResult">
    <title>PHPUnit2_Framework_TestResult のサブクラスの作成</title>

    <para>
      <indexterm><primary>PHPUnit2_Framework_TestResult</primary></indexterm>

      独自の <literal>PHPUnit2_Framework_TestResult</literal> オブジェクトを
      <literal>run()</literal> メソッドに渡すと、
      テストの実行方法や収集されるテスト結果を変更することができます。
    </para>
  </section>

  <section id="extending-phpunit.PHPUnit2_Framework_TestListener">
    <title>PHPUnit2_Framework_TestListener の実装</title>

    <para>
      <indexterm><primary>PHPUnit2_Framework_TestListener</primary></indexterm>
      <indexterm><primary>PHPUnit2_Framework_TestResult</primary></indexterm>

      テスト結果をカスタマイズするために、必ず <literal>PHPUnit2_Framework_TestResult</literal>
      のサブクラスを書かなければならないというわけではありません。たいていは、
      新しい <literal>PHPUnit2_Framework_TestListener</literal> を実装して
      (<xref linkend="api.testresult.tables.testlistener" /> を参照ください)、
      テストの前にそれを <literal>PHPUnit2_Framework_TestResult</literal>
      オブジェクトにアタッチするだけで十分です。
    </para>

    <para>
      <xref linkend="extending-phpunit.examples.SimpleTestListener.php" />
      は、<literal>PHPUnit2_Framework_TestListener</literal>
      インターフェイスを実装する単純な例です。
    </para>

    <example id="extending-phpunit.examples.SimpleTestListener.php">
      <title>シンプルなテストリスナー</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit2/Framework/TestListener.php';

class SimpleTestListener
implements PHPUnit2_Framework_TestListener {
  public function
  addError(PHPUnit2_Framework_Test $test, Exception $e) {
    printf(
      "テスト '%s' の実行中にエラーが発生しました。\n",
      $test->getName()
    );
  }

  public function
  addFailure(PHPUnit2_Framework_Test $test,
             PHPUnit2_Framework_AssertionFailedError $e) {
    printf(
      "テスト '%s' に失敗しました。\n",
      $test->getName()
    );
  }

  public function
  addIncompleteTest(PHPUnit2_Framework_Test $test,
                    Exception $e) {
    printf(
      "テスト '%s' は未完了です。\n",
      $test->getName()
    );
  }

  public function startTest(PHPUnit2_Framework_Test $test) {
    printf(
      "テスト '%s' が開始されました。\n",
      $test->getName()
    );
  }

  public function endTest(PHPUnit2_Framework_Test $test) {
    printf(
      "テスト '%s' が終了しました。\n",
      $test->getName()
    );
  }

  public function
  startTestSuite(PHPUnit2_Framework_TestSuite $suite) {
    printf(
      "テストスイート '%s' が開始されました。\n",
      $suite->getName()
    );
  }

  public function
  endTestSuite(PHPUnit2_Framework_TestSuite $suite) {
    printf(
      "テストスイート '%s' が終了しました。\n",
      $suite->getName()
    );
  }
}
?>]]></programlisting>
    </example>

    <para>
      <indexterm><primary>PHPUnit2_Framework_TestResult</primary></indexterm>
      <indexterm><primary>PHPUnit2_Framework_TestSuite</primary></indexterm>

      <xref linkend="extending-phpunit.examples.SimpleTestListener-example.php" />
      は、テストスイートを実行して監視する方法を示したものです。
    </para>

    <example id="extending-phpunit.examples.SimpleTestListener-example.php">
      <title>テストスイートの実行と監視</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit2/Framework/TestResult.php';
require_once 'PHPUnit2/Framework/TestSuite.php';

require_once 'ArrayTest.php';
require_once 'SimpleTestListener.php';

// ArrayTest クラスのテストを含む
// テストスイートを作成します。
$suite = new PHPUnit2_Framework_TestSuite('ArrayTest');

// テスト結果オブジェクトを作成し、そこにオブザーバとして
// SimpleTestListener をアタッチします。
$result = new PHPUnit2_Framework_TestResult;
$result->addListener(new SimpleTestListener);

// テストを実行します。
$suite->run($result);
?>]]></programlisting>

<screen>テストスイート 'ArrayTest' が開始されました。
テスト 'testNewArrayIsEmpty' が開始されました。
テスト 'testNewArrayIsEmpty' が終了しました。
テスト 'testArrayContainsAnElement' が開始されました。
テスト 'testArrayContainsAnElement' が終了しました。
テストスイート 'ArrayTest' が終了しました。</screen>
    </example>
  </section>

  <section id="extending-phpunit.TestRunner">
    <title>新しいテストランナーの作成</title>

    <para>
      テストの実行結果を異なる方法で受け取りたい場合には、
      独自のテストランナーを作成します。その際の初めの一歩となるのが、
      <literal>PHPUnit2_TextUI_TestRunner</literal> クラス (PHPUnit
      のコマンドライン版テストランナー) の親クラスである抽象クラス
      <literal>PHPUnit2_Runner_BaseTestRunner</literal> です。
    </para>
  </section>
</chapter>
