<?xml version="1.0" encoding="utf-8" ?>

<chapter id="other-uses-for-tests">
  <title>Другие использования тестов</title>

  <para>
    Когда вы привыкнете писать тесты, вам будет любопытно найти и другие
    применения к ним. Ниже приведены несколько примеров.
  </para>

  <section id="other-uses-for-tests.agile-documentation">
    <title>Документация Agile</title>

    <para>
      <indexterm><primary>Документация Agile</primary></indexterm>
      <indexterm><primary>Автоматическая документация</primary></indexterm>
      <indexterm><primary>Экстремальное программирование</primary></indexterm>
      <indexterm><primary>TestDox</primary></indexterm>

      Обычно, в проекте, который разрабатывается по методологии agile, таких как
      Экстремальное программирование, документация не может успевать за частыми
      изменениями дизайна и кода проекта. Экстремальное программирование требует
      <emphasis>коллективного владения кодом</emphasis>, таким образом, что все
      разработчики будут знать как работает вся система. Если вы достаточно
      дисциплинированы для того чтобы писать "говорящие имена" для тестов,
      которые описывают то, что должен делать класс, вы можете использовать
      функциональность TestDox из PHPUnit. Эта документация даёт разработчиками
      описание того, что делает каждый класс.
    </para>

    <para>
      Функциональность TestDox PHPUnit'а просматривает классы тестов и
      преобразует все методы тестового класса из camel case в предложения:
      <literal>testBalanceIsInitiallyZero()</literal> становится "Balance is
      initially zero". Если найдено несколько имен методов, которые отличаются
      только цифрой на конце, таких как <literal>
      testBalanceCannotBecomeNegative()</literal> и
      <literal>testBalanceCannotBecomeNegative2()</literal>, то предложение
      "Balance cannot become negative" появится в документации только один раз,
      при условии что все из этих тестов прошли.
    </para>

    <para>
      Давайте взглянем на документацию, созданную для класса
      <literal>BankAccount</literal> (из
      <xref linkend="test-driven-development.bankaccount-example.examples.BankAccountTest.php" />):
    </para>

    <screen><userinput>phpunit --testdox BankAccountTest</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

BankAccount
 [x] Balance is initially zero
 [x] Balance cannot become negative</screen>

    <para>
      Документация agile также может быть создана в текстовом или HTML формате
      и записана в файл. Для этого следует использовать аргументы
      <literal>--testdox-html</literal> и <literal>--testdox-text</literal>.
    </para>

    <para>
      <indexterm><primary>Документирование предположений</primary></indexterm>

      Документация agile может быть использована для документирования
      предположений, которые делаются относительно внешних пакетов в проекте.
      Когда вы используете внешние компоненты, вы подвержены риску того что
      компонент изменит свое поведение, и что будущие версии пакета будут
      меняться и незаметно ломать ваш код. Вы можете снизить рискаи при
      написании теста каждый раз когда вы делаете предположение. Если тест
      проходит - то ваше  предположение верно. Если вы будете документировать
      все предположения в виде тестов, следующие версии компонент не будут
      причиной для беспокойства: если тесты проходят - значит система может
      продолжать работать.
    </para>
  </section>

  <section id="other-uses-for-tests.cross-team-tests">
    <title>Межкомандные тесты</title>

    <para>
      Если вы документируете свои предположения в виде тестов, то вы владеете
      тестами. Поставщик пакета - тот про кого вы делаете предположения - ничего
      не знает про выши тесты. Если вам необходимо иметь тесную связь с
      поставщиком компонента, вы можете использовать тесты для того чтобы
      управлять вашей деятельностью.
    </para>

    <para>
      Если вы собираетесь управлять деятельностью с поставщиком компонента - вы
      можете написать тесты вместе. Сделайте это таки образом, чтобы тесты
      выявили как можно больше предположений. Скрытые допущения убивают
      сотрудничество. С помощью тестов вы документируете то, что вы ожидаете
      от поставщика пакета, и поставщик будет знать что компонент завершён,
      если проходят все тесты.
    </para>

    <para>
      <indexterm><primary>Заглушки</primary></indexterm>

      При использовании заглушек (см. в главе "Мок объекты", в предыдущей части
      книги) вы можете ещё больше отойти от связи с поставщиком пакета -
      поставщику стоит заботиться о том чтобы проходили тесты с реальной
      системой. Вашей работой будет создание тестов для своего кода. До того
      момента, пока у вас не будет реальной реализации компонента, вы работаете
      с заглушками. Следуя этому принципу две команды могут работать независимо
      друг от друга.
    </para>
  </section>
</chapter>
