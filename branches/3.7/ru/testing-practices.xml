<?xml version="1.0" encoding="utf-8" ?>

<chapter id="testing-practices">
  <title>Практики тестирования</title>

  <blockquote>
    <attribution>Эрик Грэмма (Erich Gamma)</attribution>
    <para>
      Всегда хочется написать побольше тестов. Однако, скоро выходит так, что
      только малая часть, из тех тестов что можно придумать, являются полезными.
      Что нужно делать - это писать тесты которые проваливаются, даже если вы
      думаете, что они пройдут, или тесты которые проходят, даже если вы думаете
      что они провалятся. Другими словами - это тесты которые отплатят вам
      информацией за потраченное время и деньги.
    </para>
  </blockquote>

  <section id="testing-practices.during-development">
    <title>Во время разработки</title>

    <para>
      <indexterm><primary>Рефакторинг</primary></indexterm>

      Когда необходимо сделать изменение во внутреннем устройстве программы вы
      работаете над тем, чтобы код легче было понимать и проще было вносить
      изменения без затрагивания поведения. Тесты нельзя переоценить в применении
      так называемого <ulink url="http://martinfowler.com/bliki/DefinitionOfRefactoring.html">рефакторинга</ulink>.
      Иначе, вы можете не знать что код не работает до того момента, пока не
      начнёте реструктуризацию.
    </para>

    <para>
      Следующие пункты помогут улучшить код и дизайн проекта, в то время как
      юнит тесты помогут знать, что рефакторинг не вносит изменений,
      затрагивающих поведение и не вносит ошибок:
    </para>

    <orderedlist>
      <listitem>
        <para>Все юнит-тесты проходят.</para>
      </listitem>

      <listitem>
        <para>Код сообщает его принципы дизайна.<!--  The code communicates its design principles --></para>
      </listitem>

      <listitem>
        <para>Код не избыточен.</para>
      </listitem>

      <listitem>
        <para>Код содержит минимальный набор классов и методов.</para>
      </listitem>
    </orderedlist>

    <para>
      Когда необходимо добавить новый функционал в систему - напишите сперва
      тесты. Закончите вы когда все тесты проходят. Эта практика более
      подробно описана в следующей главе.
    </para>
  </section>

  <section id="testing-practices.during-debugging">
    <title>Во время отлова ошибок (debugging)</title>

    <para>
      Когда к вам поступает отчёт о дефекте, вашей первой мыслью будет быстрее
      исправить ошибку. Опыт показывает что это не пойдёт на пользу; вполне
      возможно, что это исправление повлечёт за собой другие ошибки.
    </para>

    <para>
      Лучшим способом будет следующая последовательность действий:
    </para>

    <orderedlist>
      <listitem>
        <para>
          Подтвердите, что вы можете повторить ошибку.
        </para>
      </listitem>

      <listitem>
        <para>
          Найдите наименьший участок кода, который вызывает ошибку. Например,
          если выводится неправильное число - найдите объект который это число
          вычисляет.
        </para>
      </listitem>

      <listitem>
        <para>
          Напишите автоматический тест, который проваливается сейчас, но будет
          работать после того как вы исправите дефект.
        </para>
      </listitem>

      <listitem>
        <para>
          Исправьте дефект.
        </para>
      </listitem>
    </orderedlist>

    <para>
      Процесс нахождения наименьшего участка кода, который вызывает дефект, даёт
      возможность оценить действительную причину дефекта. Тест повысит шансы
      того, что, когда вы исправите дефект, вы действительно его исправите,
      потому что тест снижает вероятность повторения дефекта в будущем. А все
      написаные тесты снижают вероятность случайного возникновения другого
      дефекта.
    </para>

    <blockquote>
      <attribution>Бэнждамин Смедберг (Benjamin Smedberg)</attribution>
      <para>
        Юнит тесты имеют много перимуществ:
        <itemizedlist>
          <listitem><para>Тестирование даёт авторам кода, и тем кто его просматривает, уверенность что изменения дают правильный результат.</para></listitem>
          <listitem><para>Написание тесткейсов является хорошим стимулом для того, чтобы узнать о крайних случаях.</para></listitem>
          <!-- <listitem><para>Authoring testcases is a good impetus for developers to discover edge cases.</para></listitem> -->
          <listitem><para>Тестирование даёт хороший шанс уловить регрессии быстро, а также дает уверенность того, что эти регрессии не повторятся в следующий раз.</para></listitem>
          <listitem><para>Юнит тесты предоставляют рабочие примеры того как используется API и, следственно, как значительно уменьшить объем документации.</para></listitem>
        </itemizedlist>
        В общих чертах, юнит тесты делают риск любого изменения значительно
        меньшим. Это позволит проекту сделать [...] большие архитектурные
        улучшения [...] быстро и надёжно.
      </para>
    </blockquote>
  </section>
</chapter>
