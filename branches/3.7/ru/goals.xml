<?xml version="1.0" encoding="utf-8" ?>

<chapter id="goals">
  <title>Цели PHPUnit</title>

  <para>
    Пока у нас есть только два теста для встроенного типа <literal>array</literal>
    и функции <literal>count()</literal>. Если мы начнём тестирование
    многочисленных функций <literal>array_ *() </literal> которые предоставляет PHP нам должны будем
    написать тест для каждой из них. Мы могли бы написать инфраструктуру для
    всех эти тестов с нуля. Однако, гораздо лучше написать один раз тестовую инфраструктуру,
    а затем писать только уникальные части каждого теста.
    PHPUnit как раз и является такой инфраструктурой.
  </para>

  <para>
    Такой фреймворк как PHPUnit должен соответствовать ряду требований, некоторые
    из конторых кажутся противоречивыми. Одновременно тесты должны быть:

    <!-- TODO Find better russian phrase for this
    A framework such as PHPUnit has to resolve a set of constraints, some of
    which seem always to conflict with each other. Simultaneously, tests
    should be: -->
  </para>

  <variablelist>
    <varlistentry>
      <term><emphasis>Простыми в изучении.</emphasis></term>
      <listitem>
        <para>
          Если будет сложно нучиться писать тесты, разработчики не будут учиться как писать тесты.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Простыми в написании.</emphasis></term>
      <listitem>
        <para>
          Если тесты будут сложными при написании, разработчики нестанут их писать.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Легко читаемыми.</emphasis></term>
      <listitem>
        <para>
          Тестовый код не должен содержать дополнительной сложности, так чтобы
          тест сам по себе не потерялся в шуме который его окружает.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Легко выполнимыми.</emphasis></term>
      <listitem>
        <para>
          Тесты должны запускаться по нажатию одной кнопки и представлять
          результат и ясном и недвусмысленном формате.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Быстро выполнимыми.</emphasis></term>
      <listitem>
        <para>
          Тесты должны выполняться быстро чтобы их можно было запускать сотни
          или даже тысячи раз в день.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Изолированными.</emphasis></term>
      <listitem>
        <para>
          Тесты не должны влиять друг на друга. Если порядок запуска тестов
          меняется результат тестов должен оставться неизменным.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Комбинируемыми.</emphasis></term>
      <listitem>
        <para>
          Мы должны иметь возможность запускать совместно любое количество тестов в любых комбинациях.
          Это является естественным следствием изоляции.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    Существуют два основных противоречия между этими требованиями:
  </para>

  <variablelist>
    <varlistentry>
      <term><emphasis>Простота изучения против простоты написания</emphasis></term>
      <listitem>
        <para>
          В основном тесты не требуют всей гибкости языка программирования.
          Многие инструменты тестирования предоставляют свой скриптовый язык
          который включает только минимально необходимые функции для написания тестов.
          В результате тесты становится легко писать и читать т.к. в них нет шума
          который отвлекал бы вас от содержимого самих тестов. Однако,
          изучение еще одного языка программирования и набора инструментов неудобно
          и загромождает ум.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Изоляция простив скорости исполнения.</emphasis></term>
      <listitem>
        <para>
          Если вам нужно чтобы результаты одного теста никак не влияли на результаты
          другого, каждый тест должен запоминать в полном объёме состояние вселенной
          до своего начала чтобы вернуть вселенную в её оригинальное состояние после
          своего завершения. Однако, восстановление вселенной может занять долгое время:
          например, соединение с базой данных и инциализация её в заданном состоянии
          с использованием реалистичных данных.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    PHPUnit attempts to resolve these conflicts by using PHP as the testing
    language. Sometimes the full power of PHP is overkill for writing little
    straight-line tests, but by using PHP we leverage all the experience and
    tools programmers already have in place. Since we are trying to convince
    reluctant testers, lowering the barrier to writing those initial tests
    is particularly important.
  </para>

  <para>
    PHPUnit errs on the side of isolation over quick execution. Isolated
    tests are valuable because they provide high-quality feedback. You do
    not get a report with a bunch of test failures, which were really caused
    because one test at the beginning of the suite failed and left the world
    messed up for the rest of the tests. This orientation towards isolated
    tests encourages designs with a large number of simple objects. Each
    object can be tested quickly in isolation. The result is better designs
    <emphasis>and</emphasis> faster tests.
  </para>

  <para>
    PHPUnit assumes that most tests succeed and it is not worth reporting
    the details of successful tests. When a test fails, that fact is worth
    noting and reporting. The vast majority of tests should succeed and are
    not worth commenting on except to count the number of tests that run.
    This is an assumption that is really built into the reporting classes,
    and not into the core of PHPUnit. When the results of a test run are
    reported, you see how many tests were executed, but you only see details
    for those that failed.
  </para>

  <para>
    Tests are expected to be fine-grained, testing one aspect of one object.
    Hence, the first time a test fails, execution of the test halts, and
    PHPUnit reports the failure. It is an art to test by running in many
    small tests. Fine-grained tests improve the overall design of the system.
  </para>

  <para>
    When you test an object with PHPUnit, you do so only through the
    object's public interface. Testing based only on publicly visible
    behaviour encourages you to confront and solve difficult design problems
    earlier, before the results of poor design can infect large parts of the
    system.
  </para>
</chapter>
