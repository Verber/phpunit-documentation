<?xml version="1.0" encoding="utf-8" ?>

<chapter id="installation">
  <title>Installing PHPUnit</title>

  <note>
    <para>
      Please read <xref linkend="appendixes.upgrading.phpunit-4-1"/> in case you
      are upgrading from a previous version of PHPUnit.
    </para>
  </note>

  <section id="installation.requirements">
    <title>Requirements</title>

    <para>
      PHPUnit 4.1 requires PHP 5.3.3; using the latest version of PHP is highly
      recommended.
    </para>

    <para>
      PHPUnit requires the <ulink
      url="http://php.net/manual/en/dom.setup.php">dom</ulink>, <ulink
      url="http://php.net/manual/en/json.installation.php">json</ulink>,
      <ulink
      url="http://php.net/manual/en/pcre.installation.php">pcre</ulink>,
      <ulink
      url="http://php.net/manual/en/reflection.installation.php">reflection</ulink>,
      and <ulink url="http://php.net/manual/en/spl.installation.php">spl</ulink>
      extensions. These extensions are usually compiled and enabled by default.
      Some of them cannot even be disabled and are therefore always available.
    </para>

    <para>
      For code coverage support, <ulink
      url="http://xdebug.org/">Xdebug</ulink> 2.1.3 is required; using the
      latest version of Xdebug is highly recommended. The <ulink
      url="http://php.net/manual/en/tokenizer.installation.php">tokenizer</ulink>
      extension is also required for the code coverage functionality to work.
      The <ulink
      url="http://php.net/manual/en/xmlwriter.installation.php">xmlwriter</ulink>
      extension is required to log code coverage information as XML.
    </para>

    <para>
      The <ulink
      url="http://php.net/manual/en/phar.installation.php">phar</ulink>
      extension is required for using PHPUnit from a PHP Archive (PHAR). The
      <ulink
      url="http://php.net/manual/en/openssl.installation.php">openssl</ulink>
      extension is required for the <literal>--self-update</literal>
      functionality of PHPUnit's PHAR to work. You need to configure
      <literal>suhosin.executor.include.whitelist = phar</literal> if you are
      using the <ulink url="http://suhosin.org/">Suhosin</ulink> extension and
      would like to use PHPUnit from a PHP Archive (PHAR).
    </para>
  </section>

  <section id="installation.phar">
    <title>PHP Archive (PHAR)</title>

    <para>
      The easiest way to obtain PHPUnit is to download a <ulink
      url="http://php.net/phar">PHP Archive (PHAR)</ulink> that has all required
      (as well as some optional) dependencies of PHPUnit bundled in a single
      file:
    </para>

    <screen><userinput>wget https://phar.phpunit.de/phpunit.phar</userinput>
<userinput>chmod +x phpunit.phar</userinput>
<userinput>mv phpunit.phar /usr/local/bin/phpunit</userinput></screen>

    <note>
      <para>
        To download from <literal>https://phar.phpunit.de/</literal>  you need a
        client with <ulink
        url="http://en.wikipedia.org/wiki/Server_Name_Indication">TLS/SNI
        support</ulink>, wget 1.14 (or later), for instance.
      </para>
    </note>

    <para>
      You can also immediately use the PHAR after you have downloaded it, of
      course:
    </para>

    <screen><userinput>wget https://phar.phpunit.de/phpunit.phar</userinput>
<userinput>php phpunit.phar</userinput></screen>

    <section id="installation.phar.verification">
      <title>Verifying PHPUnit PHAR Releases</title>

      <para>
        All official releases of code distributed by the PHPUnit Project are
        signed by the release manager for the release. PGP signatures and SHA1
        hashes are available for verification on <ulink
        url="https://phar.phpunit.de/">phar.phpunit.de</ulink>.
      </para>

      <para>
        The following example details how release verification works. We start
        by downloading <filename>phpunit.phar</filename> as well as its
        detached PGP signature <filename>phpunit.phar.asc</filename>:
      </para>

      <screen><userinput>wget https://phar.phpunit.de/phpunit.phar</userinput>
<userinput>wget https://phar.phpunit.de/phpunit.phar.asc</userinput></screen>

      <para>
        We want to verify PHPUnit's PHP Archive (<filename>phpunit.phar</filename>)
        against its detached signature (<filename>phpunit.phar.asc</filename>):
      </para>

      <screen><userinput>gpg phpunit.phar.asc</userinput>
gpg: Signature made Sat 19 Jul 2014 01:28:02 PM CEST using RSA key ID 6372C20A
gpg: Can't check signature: public key not found</screen>

      <para>
        We don't have the release manager's public key (<literal>6372C20A</literal>)
        in our local system. In order to proceed with the verification we need
        to retrieve the release manager's public key from a key server. One such
        server is <filename>pgp.uni-mainz.de</filename>. The public key servers
        are linked together, so you should be able to connect to any key server.
      </para>

      <screen><userinput>gpg --keyserver pgp.uni-mainz.de --recv-keys 0x4AA394086372C20A</userinput><![CDATA[
gpg: requesting key 6372C20A from hkp server pgp.uni-mainz.de
gpg: key 6372C20A: public key "Sebastian Bergmann <sb@sebastian-bergmann.de>" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)]]></screen>

      <para>
        Now we have received a public key for an entity known as "Sebastian
        Bergmann &lt;sb@sebastian-bergmann.de&gt;". However, we have no way of
        verifying this key was created by the person known as Sebastian
        Bergmann. But, let's try to verify the release signature again.
      </para>

      <screen><userinput>gpg phpunit.phar.asc</userinput><![CDATA[
gpg: Signature made Sat 19 Jul 2014 01:28:02 PM CEST using RSA key ID 6372C20A
gpg: Good signature from "Sebastian Bergmann <sb@sebastian-bergmann.de>"
gpg:                 aka "Sebastian Bergmann <sebastian@php.net>"
gpg:                 aka "Sebastian Bergmann <sebastian@thephp.cc>"
gpg:                 aka "Sebastian Bergmann <sebastian@phpunit.de>"
gpg:                 aka "Sebastian Bergmann <sebastian.bergmann@thephp.cc>"
gpg:                 aka "[jpeg image of size 40635]"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: D840 6D0D 8294 7747 2937  7831 4AA3 9408 6372 C20A]]></screen>

      <para>
        At this point, the signature is good, but we don't trust this key. A
        good signature means that the file has not been tampered. However, due
        to the nature of public key cryptography, you need to additionally
        verify that key <literal>6372C20A</literal> was created by the real
        Sebastian Bergmann.
      </para>

      <para>
        Any attacker can create a public key and upload it to the public key
        servers. They can then create a malicious release signed by this fake
        key. Then, if you tried to verify the signature of this corrupt release,
        it would succeed because the key was not the "real" key. Therefore, you
        need to validate the authenticity of this key. Validating the
        authenticity of a public key, however, is outside the scope of this
        documentation.
      </para>
    </section>
  </section>

  <section id="installation.composer">
    <title>Composer</title>

    <para>
      Simply add a dependency on <literal>phpunit/phpunit</literal> to your
      project's <literal>composer.json</literal> file if you use
      <ulink url="http://getcomposer.org/">Composer</ulink> to manage the
      dependencies of your project. Here is a minimal example of a
      <literal>composer.json</literal> file that just defines a development-time
      dependency on PHPUnit 4.1:
    </para>

    <programlisting><![CDATA[{
    "require-dev": {
        "phpunit/phpunit": "4.1.*"
    }
}]]></programlisting>

    <para>
      For a system-wide installation via Composer, you can run:
    </para>

    <screen><userinput>composer global require "phpunit/phpunit=4.1.*"</userinput></screen>

    <para>
      Make sure you have <literal>~/.composer/vendor/bin/</literal> in your
      path.
    </para>
  </section>

  <section id="installation.optional-packages">
    <title>Optional packages</title>

    <para>
      The following optional packages are available:
    </para>

    <variablelist>
      <varlistentry>
        <term>
          <literal>PHP_Invoker</literal>
        </term>

        <listitem>
          <para>
            A utility class for invoking callables with a timeout. This package is
            required to enforce test timeouts in strict mode.
          </para>

          <para>
            This package is included in the PHAR distribution of PHPUnit. It can
            be installed via Composer by adding the following
            <literal>"require-dev"</literal> dependency:
          </para>

          <screen><userinput>"phpunit/php-invoker": "*"</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>DbUnit</literal>
        </term>

        <listitem>
          <para>
            DbUnit port for PHP/PHPUnit to support database interaction testing.
          </para>

          <para>
            This package is included in the PHAR distribution of PHPUnit. It can
            be installed via Composer by adding the following
            <literal>"require-dev"</literal> dependency:
          </para>

          <screen><userinput>"phpunit/dbunit": ">=1.2"</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_Selenium</literal>
        </term>

        <listitem>
          <para>
            Selenium RC integration for PHPUnit.
          </para>

          <para>
            This package is included in the PHAR distribution of PHPUnit. It can
            be installed via Composer by adding the following
            <literal>"require-dev"</literal> dependency:
          </para>

          <screen><userinput>"phpunit/phpunit-selenium": ">=1.2"</userinput></screen>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</chapter>
