<?xml version="1.0" encoding="utf-8" ?>

<chapter id="continuous-integration">
  <title>継続的インテグレーション</title>

  <caution>
    <para>
      このドキュメントは、すでにサポートが終了したバージョンの PHPUnit に関するものです。
    </para>

    <para>
      最新版の PHPUnit のドキュメントは
      <ulink url="../../current/ja/index.html">こちら</ulink>にあります。
    </para>
  </caution>

  <para>
    この章では、まず継続的インテグレーションという技法の概要について述べ、
    それを PHPUnit にどのように適用するかを説明していきます。
  </para>

  <blockquote>
    <attribution>Martin Fowler</attribution>
    <para>
      <ulink url="http://www.martinfowler.com/articles/continuousIntegration.html">Continuous Integration</ulink>
      is a software development practice where members of a team integrate
      their work frequently, usually each person integrates at least daily,
      leading to multiple integrations per day. Each integration is verified
      by an automated build (including test) to detect integration errors as
      quickly as possible. Many teams find that this approach leads to
      significantly reduced integration problems and allows a team to develop
      cohesive software more rapidly.
    </para>
    <para>
      <ulink url="http://www.martinfowler.com/articles/continuousIntegration.html">継続的インテグレーション</ulink>
      というソフトウェア開発手法は、チームのメンバーどうしが
      お互いの開発内容を頻繁に結合させるというものだ、通常は、
      最低でも一日に一度、あるいは場合によっては一日に何度もこれを行う。
      結合の際には自動ビルド (テストを含む) を行い、
      エラーはできるだけ早い段階で検出する。
      多くのチームが、この手法によって結合時の問題を激減させている。
      また、ソフトウェアをより高速に開発できるようにもなっている。
    </para>
  </blockquote>

  <para>
    継続的インテグレーションでは、テストを含めたビルド手順を
    完全に自動化して何度でも実行できるようにしておく必要があります。
    これは、一日に何度も実行されます。
    各開発者は、この仕組みによって結合を行い、結合時の問題を減らします。
    <ulink url="http://en.wikipedia.org/wiki/Crontab">cronjob</ulink>
    を使用して自動化を実現することもできます。まずプロジェクトの
    <ulink url="http://en.wikipedia.org/wiki/Source_code_repository">
    ソースコードリポジトリ</ulink> から定期的に最新版をチェックアウトし、
    テストを実行し、その結果を利用しやすい形式で出力するというジョブを作成すればよいのです。
    ただ、もう少しましなやりかたもありそうです。
  </para>

  <section id="continuous-integration.atlassian-bamboo">
    <title>Atlassian Bamboo</title>

    <para>
      <indexterm><primary>Atlassian Bamboo</primary></indexterm>

      <ulink url="http://www.atlassian.com/software/bamboo/">Atlassian Bamboo</ulink>
      は継続的インテグレーション (Continuous Integration: CI) サーバで、
      ソフトウェア開発チームを支援するための機能を提供します。
      自動化されたビルド、ソフトウェアのソースコードの状態のテスト、
      ビルドが成功したか失敗したかの判定、統計解析データの出力といった機能があります。
    </para>

    <para>
      次の例では、Bamboo の配布アーカイブが
      <filename>/usr/local/Bamboo</filename>.
      に展開されたことを想定しています。
    </para>

    <orderedlist>
      <listitem><screen><userinput>cd /usr/local/Bamboo</userinput></screen></listitem>
      <listitem><para><filename>webapp/WEB-INF/classes/bamboo-init.properties</filename> ファイルを編集します。</para></listitem>
      <listitem><para>オプションで <literal>bamboo-checkstyle</literal> プラグインをインストールします。</para></listitem>
    </orderedlist>

    <example id="continuous-integration.atlassian-bamboo.examples.bamboo-init.properties">
      <title>bamboo-init.properties</title>
      <programlisting><![CDATA[bamboo.home=/usr/local/Bamboo]]></programlisting>
    </example>

    <orderedlist continuation="continues">
      <listitem><screen><userinput>./bamboo.sh start</userinput></screen></listitem>
      <listitem><filename>http://localhost:8085/</filename> をブラウザで開きます。</listitem>
      <listitem><para>インストールガイドの指示に従います。</para></listitem>
      <listitem><para>Apache Ant を管理パネル内で Builder として設定します。</para></listitem>
    </orderedlist>

    <para>
      これで、Bamboo の設定が完了し、プロジェクトのプランを用意できるようになりました。
      しかしながら、まずはプロジェクトが必要です。この例では、PHPUnit に同梱されている
      <filename>Money</filename> サンプルのコピーが Subversion リポジトリ
      (<filename>file:///var/svn/money</filename>) にあるものとします。
      <filename>*.php</filename> ファイル群とともに、次のような
      Apache Ant ビルドスクリプト (<filename>build.xml</filename>)
      もリポジトリに置きます。
    </para>

    <example id="continuous-integration.atlassian-bamboo.examples.build.xml">
      <title>build.xml</title>
      <programlisting><![CDATA[<project name="Money" default="build">
 <target name="clean">
  <delete dir="${basedir}/build"/>
 </target>

 <target name="prepare">
  <mkdir dir="${basedir}/build"/>
  <mkdir dir="${basedir}/build/logs"/>
 </target>

 <target name="phpcs">
  <exec dir="${basedir}"
        executable="phpcs"
        output="${basedir}/build/logs/checkstyle.xml"
        failonerror="false">
   <arg line="--report=checkstyle ." />
  </exec>
 </target>

 <target name="phpunit">
  <exec dir="${basedir}" executable="phpunit" failonerror="true">
   <arg line="--log-xml         ${basedir}/build/logs/phpunit.xml
              --coverage-clover ${basedir}/build/logs/clover.xml
              --coverage-html   ${basedir}/build/coverage
              MoneyTest" />
  </exec>
 </target>

 <target name="build" depends="clean,prepare,phpcs,phpunit"/>
</project>]]></programlisting>
    </example>

    <para>
      これでプロジェクトができあがりました。Bamboo でプランを作成してみましょう。
    </para>

    <orderedlist continuation="continues">
      <listitem><filename>http://localhost:8080/</filename> をブラウザで開きます。</listitem>
      <listitem><para>"Create a Plan" を選び、指示に従います。</para></listitem>
      <listitem><para>"Create a Plan" のステップ 3 で "The build will produce test results" と "Clover output will be produced" をチェックし、PHPUnit が作成した XML ファイルのパスを指定します。</para><para><literal>bamboo-checkstyle</literal> プラグインをインストールした場合は "CheckStyle output will be produced" もチェックし、<ulink url="http://pear.php.net/package/PHP_CodeSniffer/">PHP_CodeSniffer</ulink> が作成した XML ファイルのパスを指定します。</para></listitem>
      <listitem><para>"Create a Plan" のステップ 5 で、PHPUnit が作成する HTML ファイルを設定します。</para></listitem>
    </orderedlist>
  </section>

  <section id="continuous-integration.cruisecontrol">
    <title>CruiseControl</title>

    <para>
      <indexterm><primary>Apache Ant</primary></indexterm>
      <indexterm><primary>CruiseControl</primary></indexterm>

      <ulink url="http://cruisecontrol.sourceforge.net/">CruiseControl</ulink>
      は継続的ビルドプロセス用のフレームワークです。それだけではなく、
      メールでの通知や
      <ulink url="http://ant.apache.org/">Apache Ant</ulink> との統合、
      またさまざまなバージョン管理ツールとの統合のためのプラグインが用意されています。
      またウェブインターフェイスも用意されており、
      最新のビルドおよび以前のビルドについての詳細を見ることができます。
    </para>

    <para>
      次の例では、CruiseControl が
      <filename>/usr/local/cruisecontrol</filename>
      にインストールされていることを想定しています。
    </para>

    <orderedlist>
      <listitem><screen><userinput>cd /usr/local/cruisecontrol</userinput></screen></listitem>
      <listitem><screen><userinput>mkdir -p projects/Money/build/logs</userinput></screen></listitem>
      <listitem><screen><userinput>cd projects/Money</userinput></screen></listitem>
      <listitem><screen><userinput>file:///var/svn/money source</userinput></screen></listitem>
      <listitem><filename>build.xml</filename> ファイルを編集します。</listitem>
    </orderedlist>

    <example id="continuous-integration.cruisecontrol.examples.build.xml">
      <title>projects/Money/build.xml</title>
      <programlisting><![CDATA[<project name="Money" default="build" basedir=".">
 <target name="checkout">
  <exec dir="${basedir}/source/" executable="svn">
   <arg line="up"/>
  </exec>
 </target>

 <target name="test">
  <exec dir="${basedir}/source" executable="phpunit" failonerror="true">
   <arg line="--log-xml ${basedir}/build/logs/phpunit.xml MoneyTest"/>
  </exec>
 </target>

 <target name="build" depends="checkout,test"/>
</project>]]></programlisting>
    </example>

    <orderedlist continuation="continues">
      <listitem><screen><userinput>cd /usr/local/cruisecontrol</userinput></screen></listitem>
      <listitem><filename>config.xml</filename> ファイルを編集します。</listitem>
    </orderedlist>

    <example id="continuous-integration.cruisecontrol.examples.config.xml">
      <title>config.xml</title>
      <programlisting><![CDATA[<cruisecontrol>
  <project name="Money" buildafterfailed="false">
    <plugin
    name="svnbootstrapper"
    classname="net.sourceforge.cruisecontrol.bootstrappers.SVNBootstrapper"/>
    <plugin
    name="svn"
    classname="net.sourceforge.cruisecontrol.sourcecontrols.SVN"/>

    <listeners>
      <currentbuildstatuslistener file="logs/${project.name}/status.txt"/>
    </listeners>

    <bootstrappers>
      <svnbootstrapper localWorkingCopy="projects/${project.name}/source/"/>
    </bootstrappers>

    <modificationset>
      <svn localWorkingCopy="projects/${project.name}/source/"/>
    </modificationset>

    <schedule interval="300">
      <ant
      anthome="apache-ant-1.7.0"
      buildfile="projects/${project.name}/build.xml"/>
    </schedule>

    <log dir="logs/${project.name}">
      <merge dir="projects/${project.name}/build/logs/"/>
    </log>

    <publishers>
      <currentbuildstatuspublisher
      file="logs/${project.name}/buildstatus.txt"/>

      <email
      mailhost="localhost"
      buildresultsurl="http://cruise.example.com/buildresults/${project.name}"
      skipusers="true"
      spamwhilebroken="true"
      returnaddress="project@example.com">
        <failure address="dev@lists.example.com" reportWhenFixed="true"/>
      </email>
    </publishers>
  </project>
</cruisecontrol>]]></programlisting>
    </example>

    <para>
      これで CruiseControl サーバを(再)起動できるようになります。
    </para>

    <orderedlist continuation="continues">
      <listitem><screen><userinput>./cruisecontrol.sh</userinput></screen></listitem>
      <listitem><filename>http://localhost:8080/</filename> をブラウザで開きます。</listitem>
    </orderedlist>
  </section>

  <section id="continuous-integration.phpUnderControl">
    <title>phpUnderControl</title>

    <para>
      <indexterm><primary>phpUnderControl</primary></indexterm>

      <ulink url="http://www.phpundercontrol.org/">phpUnderControl</ulink> は
      CruiseControl の拡張で、さまざまな PHP 開発ツール、たとえばテスト用の
      PHPUnit や
      <ulink url="http://en.wikipedia.org/wiki/Static_code_analysis">静的コード解析</ulink>用の
      <ulink url="http://pear.php.net/package/PHP_CodeSniffer">PHP_CodeSniffer</ulink>、
      そして <ulink url="http://en.wikipedia.org/wiki/Documentation_generator">API
      ドキュメントの生成</ulink>用の
      <ulink url="http://www.phpdoc.org/">PHPDocumentor</ulink>
      を統合します。強力なコマンドラインツールも付属しており、あなたのプロジェクト用に
      CruiseControl の XML 設定ファイルを自動生成させることもできます。
      次の例では、CruiseControl が
      <filename>/usr/local/cruisecontrol</filename>
      にインストールされていることを想定しています。
    </para>

    <orderedlist>
      <listitem><screen><userinput>pear install --alldeps phpunit/phpUnderControl</userinput></screen></listitem>
      <listitem><screen><userinput>phpuc install /usr/local/cruisecontrol</userinput></screen></listitem>
      <listitem><screen><userinput>phpuc project --version-control svn
              --version-control-url file:///var/svn/money
              --test-case MoneyTest
              --test-file MoneyTest.php
              --test-dir .
              --project-name Money
              /usr/local/cruisecontrol</userinput></screen></listitem>
    </orderedlist>

    <para>
      上のコマンドは、まずプロジェクトのディレクトリとそのプロジェクト用の設定ファイル
      <filename>build.xml</filename> を作成し、ソースリポジトリから初期チェックアウトを行い、
      その新しいプロジェクトをグローバル設定ファイル
      <filename>config.xml</filename> に追加します。
      これで CruiseControl サーバを(再)起動できるようになります。
    </para>

    <orderedlist continuation="continues">
      <listitem><screen><userinput>cd /usr/local/cruisecontrol</userinput></screen></listitem>
      <listitem><screen><userinput>./cruisecontrol.sh</userinput></screen></listitem>
      <listitem><filename>http://localhost:8080/</filename> をブラウザで開きます。</listitem>
    </orderedlist>
  </section>
</chapter>
