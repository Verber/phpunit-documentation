<?xml version="1.0" encoding="utf-8" ?>

<chapter id="testing-practices">
  <title>Практики тестирования</title>

  <blockquote>
    <attribution>Эрих Гамма (Erich Gamma)</attribution>
    <para>
      Всегда можно придумать достаточно много тестов. Однако скоро становится ясно, что
      только малая часть из тестов что вы можете вообразить, действительно полезны.
      Что вам нужно делать, так это писать тесты которые проваливаются, даже если вы
      думаете, что они пройдут, или тесты которые проходят, даже если вы думаете
      что они провалятся. Можно взглянуть на это с другой стороны и думать об этом
      как о затратах и прибыли. Вам нужно писать тесты которые отплатят вам информацией
      за потраченное время и деньги.
    </para>
  </blockquote>

  <section id="testing-practices.during-development">
    <title>Во время разработки</title>

    <para>
      <indexterm><primary>Рефакторинг</primary></indexterm>

      Когда необходимо сделать изменение во внутреннем устройстве программы вы
      работаете над тем, чтобы код легче было понимать и проще было модифицировать
      без изменения наблюдаемого поведения. Тесты неоценимы при так называемом
      <ulink url="http://martinfowler.com/bliki/DefinitionOfRefactoring.html">рефакторинге</ulink>.
      Иначе, вы можете не заметить что код не работает пока проводите реструктуризацию.
    </para>

    <para>
      Следующие условия помогут улучшить код и дизайн проекта, в то время как
      юнит тесты помогут знать, что рефакторинг на самом деле не меняет поведение,
      и не вносит ошибок:
    </para>

    <orderedlist>
      <listitem>
        <para>Все юнит-тесты проходят.</para>
      </listitem>

      <listitem>
        <para> Код соответствует его принципам дизайна.
          <!-- Код сообщает его принципы дизайна? -->
          <!--  The code communicates its design principles --></para>
      </listitem>

      <listitem>
        <para>Код не избыточен.</para>
      </listitem>

      <listitem>
        <para>Код содержит минимальный набор классов и методов.</para>
      </listitem>
    </orderedlist>

    <para>
      Когда необходимо добавить новый функционал в систему - напишите сперва
      тесты. Работа будет сделана когда все тесты будут проходить. Эта практика более
      подробно описана в следующей главе.
    </para>
  </section>

  <section id="testing-practices.during-debugging">
    <title>Во время отлова ошибок (debugging)</title>

    <para>
      Когда к вам поступает отчёт о дефекте, вашей первой мыслью будет быстрее
      исправить ошибку. Опыт показывает что это не пойдёт на пользу; вполне
      возможно, что это исправление повлечёт за собой другие ошибки.
    </para>

    <para>
      Лучшим способом будет следующая последовательность действий:
    </para>

    <orderedlist>
      <listitem>
        <para>
          Убедитесь, что вы можете повторить ошибку.
        </para>
      </listitem>

      <listitem>
        <para>
          Найдите наименьший участок кода, который вызывает ошибку. Например,
          если выводится неправильное число - найдите объект который это число
          вычисляет.
        </para>
      </listitem>

      <listitem>
        <para>
          Напишите автоматический тест, который проваливается сейчас, но будет
          работать после того как вы исправите дефект.
        </para>
      </listitem>

      <listitem>
        <para>
          Исправьте дефект.
        </para>
      </listitem>
    </orderedlist>

    <para>
      Процесс нахождения наименьшего участка кода, который вызывает дефект, даёт
      возможность оценить действительную причину дефекта. Тест повысит шансы
      того, что, когда вы исправите дефект, вы действительно его исправите,
      потому что тест снижает вероятность повторения дефекта в будущем. А все
      написаные тесты снижают вероятность случайного возникновения другого
      дефекта.
    </para>

    <blockquote>
      <attribution>Бэнждамин Смедберг (Benjamin Smedberg)</attribution>
      <para>
        Юнит тесты имеют много перимуществ:
        <itemizedlist>
          <listitem><para>Тестирование даёт авторам кода, и тем кто его просматривает,
            уверенность что изменения дают правильный результат.</para></listitem>
          <listitem><para>Написание тесткейсов является хорошим стимулом для того,
            для выявления граничных условий.</para></listitem>
          <listitem><para>Тестирование даёт хороший шанс поймать регрессии быстро,
            а также дает уверенность того, что эти регрессии не повторятся
            в следующий раз.</para></listitem>
          <listitem><para>Юнит тесты предоставляют рабочие примеры
            того как используется API и, следственно значительно
            уменьшают объем документации.</para></listitem>
        </itemizedlist>
        В общих чертах, юнит тесты делают риск любого изменения значительно
        меньшим. Это позволит проекту сделать [...] большие архитектурные
        улучшения [...] быстро и уверенно.
      </para>
    </blockquote>
  </section>
</chapter>
