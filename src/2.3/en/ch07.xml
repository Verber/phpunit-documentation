<?xml version="1.0" encoding="iso-8859-1" ?>

<chapter id="incomplete-tests">
  <title>Incomplete Tests</title>

  <caution>
    <para>
      You are looking at the documentation for a version of PHPUnit that is no
      longer supported.
    </para>

    <para>
      The documentation for the current version of PHPUnit can be found
      <ulink url="../../current/en/index.html">here</ulink>.
    </para>
  </caution>

  <para>
    When you are working on a new test-case class, you might want to begin
    by writing empty test methods such as: <programlisting>public function testSomething() {
}</programlisting> to keep track of the tests that you have to write. The
    problem with empty test methods is that they are interpreted as a
    success by the PHPUnit framework. This misinterpretation leads to the
    test reports being useless -- you cannot see whether a test is actually
    successful or just not yet implemented. Calling
    <literal>$this->fail()</literal> in the unimplemented test method
    does not help either, since then the test will be interpreted as a
    failure. This would be just as wrong as interpreting an unimplemented
    test as a success.
  </para>

  <para>
    <indexterm><primary>Incomplete Test</primary></indexterm>
    <indexterm><primary>PHPUnit2_Framework_IncompleteTest</primary></indexterm>
    <indexterm><primary>PHPUnit2_Framework_IncompleteTestError</primary></indexterm>

    If we think of a successful test as a green light and a test failure
    as a red light, we need an additional yellow light to mark a test
    as being incomplete or not yet implemented.
    <literal>PHPUnit2_Framework_IncompleteTest</literal> is a marker
    interface for marking an exception that is raised by a test method as
    the result of the test being incomplete or currently not implemented.
    <literal>PHPUnit2_Framework_IncompleteTestError</literal> is the
    standard implementation of this interface.
  </para>

  <para>
    <xref linkend="incomplete-tests.examples.SampleTest.php" /> shows a
    test-case class, <literal>SampleTest</literal>, that contains one test
    method, <literal>testSomething()</literal>. By raising the
    <literal>PHPUnit2_Framework_IncompleteTestError</literal> exception in
    the test method, we mark the test as being incomplete.
  </para>

  <example id="incomplete-tests.examples.SampleTest.php">
    <title>Marking a test as incomplete</title>
    <programlisting><![CDATA[<?php
require_once 'PHPUnit2/Framework/TestCase.php';
require_once 'PHPUnit2/Framework/IncompleteTestError.php';

class SampleTest extends PHPUnit2_Framework_TestCase {
    public function testSomething() {
        // Optional: Test anything here, if you want.
        $this->assertTrue(TRUE, 'This should already work.');

        // Stop here and mark this test as incomplete.
        // You could use any Exception which implements the
        // PHPUnit2_Framework_IncompleteTest interface.
        throw new PHPUnit2_Framework_IncompleteTestError(
          'This test has not been implemented yet.'
        );
    }
}
?>]]></programlisting>
  </example>

  <para>
    An incomplete test is denoted by an <literal>I</literal> in the output
    of the PHPUnit command-line test runner, as shown in the following
    example:
  </para>

  <screen><userinput>phpunit SampleTest</userinput>
PHPUnit 2.3.0 by Sebastian Bergmann.

I

Time: 0.006657
There was 1 incomplete test case:
1) testSomething(SampleTest)
This test has not been implemented yet.

OK, but incomplete test cases!!!
Tests run: 1, incomplete test cases: 1.</screen>
</chapter>
