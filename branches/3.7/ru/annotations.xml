<?xml version="1.0" encoding="utf-8" ?>

<appendix id="appendixes.annotations">
  <title>Аннотации</title>

  <para>
    <indexterm><primary>Аннотации</primary></indexterm>

    Аннотации - это специальная форма метаданных, которая может быть добавлена
    в исходный код некоторых языков программирования. Так как PHP не имеет
    возможности аннотирования исходного кода, PHP сообщество приняло
    использование тегов <literal>@annotation arguments</literal> в docblock
    для аннотаций. В PHP блоки документации доступны с помощью метода
    <literal>getDocComment()</literal> из Reflection API, применяемого к классу,
    методу или атрибуту. Приложения, такие как PHPUnit, используют эту
    информацию чтобы изменять свое поведение в процессе выполнения.
  </para>

  <para>
    Это приложение содержит все возможные аннотации, поддерживаемые PHPUnit.
  </para>

  <section id="appendixes.annotations.author">
    <title><literal>@author</literal></title>

    <para>
      <indexterm><primary>@author</primary></indexterm>

      Аннотация <literal>@author</literal> является синонимом аннотации
      <literal>@group</literal> (см. <xref
      linkend="appendixes.annotations.group"/>) и позволяет фильтровать тесты по
      их авторам.
    </para>
  </section>

  <section id="appendixes.annotations.backupGlobals">
    <title><literal>@backupGlobals</literal></title>

    <para>
      <indexterm><primary><literal>@backupGlobals</literal></primary></indexterm>

      Операции сохранения и восстановления глобальных переменных можно
      полностью выключить для тест-кейса с помощью следующего:
      <programlisting>/**
 * @backupGlobals disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    // ...
}</programlisting>
    </para>

    <para>
      <indexterm><primary><literal>@backupGlobals</literal></primary></indexterm>

      Аннотацию <literal>@backupGlobals</literal> так же можно использовать на
      уровне методов тест-кейса. Это позволяет тонко настроить операции
      сохранения и восстановления: <programlisting>/**
 * @backupGlobals disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @backupGlobals enabled
     */
    public function testThatInteractsWithGlobalVariables()
    {
        // ...
    }
}</programlisting>
    </para>
  </section>

  <section id="appendixes.annotations.backupStaticAttributes">
    <title><literal>@backupStaticAttributes</literal></title>

    <para>
      <indexterm><primary><literal>@backupStaticAttributes</literal></primary></indexterm>

      Операции сохранения и восстановления статических атрибутов можно
      выключить для всего класса теста следующим образом:
      <programlisting>/**
 * @backupStaticAttributes disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    // ...
}</programlisting>
    </para>

    <para>
      <indexterm><primary><literal>@backupStaticAttributes</literal></primary></indexterm>

      Аннотация <literal>@backupStaticAttributes</literal> может быть
      использована на уровне методов. Это позволяет тонко настроить операции
      сохранения и восстановления: <programlisting>/**
 * @backupStaticAttributes disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @backupStaticAttributes enabled
     */
    public function testThatInteractsWithStaticAttributes()
    {
        // ...
    }
}</programlisting>
    </para>
  </section>

  <section id="appendixes.annotations.codeCoverageIgnore">
    <title><literal>@codeCoverageIgnore*</literal></title>

    <para>
      <indexterm><primary>@codeCoverageIgnore</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreStart</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreEnd</primary></indexterm>

      Аннотации <literal>@codeCoverageIgnore</literal>,
      <literal>@codeCoverageIgnoreStart</literal> и
      <literal>@codeCoverageIgnoreEnd</literal> можно использовать для
      исключения участков кода из статистики покрытия кода.
    </para>

    <para>
      Примеры использования можно посмотреть в <xref
      linkend="code-coverage-analysis.ignoring-code-blocks"/>.
    </para>
  </section>

  <section id="appendixes.annotations.covers">
    <title><literal>@covers</literal></title>

    <para>
      <indexterm><primary>Покрытие кода</primary></indexterm>
      <indexterm><primary>@covers</primary></indexterm>

      Аннотация <literal>@covers</literal> используется для указания того, какие
      метод(ы) этот тест-метод будет тестировать: <programlisting>/**
 * @covers BankAccount::getBalance
 */
public function testBalanceIsInitiallyZero()
{
    $this->assertEquals(0, $this->ba->getBalance());
}</programlisting>
    </para>

    <para>
      Если указана эта аннотация, то в статистике покрытия кода этого
      тест-метода будут учитываться только указанные в аннотации метод(ы).
    </para>

    <para>
      <xref linkend="appendixes.annotations.covers.tables.annotations"/>
      показывает синтаксис аннотации <literal>@covers</literal>.
    </para>

    <table id="appendixes.annotations.covers.tables.annotations">
      <title>Аннотации для указания того, какие методы покрывает тест</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Аннотация</entry>
            <entry>Описание</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal><![CDATA[@covers ClassName::methodName]]></literal></entry>
            <entry><literal>Указывает что метод теста покрывает указанный метод.</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName]]></literal></entry>
            <entry><literal>Указывает что метод теста покрывает все методы указанного класса.</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName<extended>]]></literal></entry>
            <entry><literal>Указывает что метод теста покрывает все методы указанного класса, включая родительские класс(ы) и интерфейс(ы).</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName::<public>]]></literal></entry>
            <entry><literal>Указывает что тест метод покрывает все public методы указанного класса.</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName::<protected>]]></literal></entry>
            <entry><literal>Указывает что тест метод покрывает все protected методы указанного класса.</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName::<private>]]></literal></entry>
            <entry><literal>Указывает что тест метод покрывает все private методы указанного класса.</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName::<!public>]]></literal></entry>
            <entry><literal>Указывает что тест метод покрывает все методы указанного класса, кроме public</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName::<!protected>]]></literal></entry>
            <entry><literal>Указывает что тест метод покрывает все методы указанного класса, кроме protected.</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName::<!private>]]></literal></entry>
            <entry><literal>Указывает что тест метод покрывает все методы указанного класса, кроме private.</literal></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="appendixes.annotations.coversNothing">
    <title><literal>@coversNothing</literal></title>

    <para>
      <indexterm><primary>@coversNothing</primary></indexterm>

      Аннотация <literal>@coversNothing</literal> используется в коде теста для
      указания того, что информация о покрытии кода аннотированным классом не
      будет записана.
    </para>

    <para>
        Эту аннотацию можно использовать для интеграционных тестов. См.
        <xref linkend="code-coverage-analysis.specifying-covered-methods.examples.GuestbookIntegrationTest.php"/>
    </para>

    <para>    
        Аннотацию можно использовать на уровне класса и метода. Она заменит все
        другие аннотации <literal>@covers</literal>.
    </para>
  </section>

  <section id="appendixes.annotations.dataProvider">
    <title><literal>@dataProvider</literal></title>

    <para>
      <indexterm><primary>@dataProvider</primary></indexterm>

      Метод теста может принимать агрументы. Эти агрументы предоставляет метод
      поставщика данных (data provider) (<literal>provider()</literal> описан в
      <xref linkend="writing-tests-for-phpunit.data-providers.examples.DataTest.php" />).
      Метод поставщика данных указывается с помощью аннотации
      <literal>@dataProvider</literal> .
    </para>

    <para>
      Более детальная информация <xref linkend="writing-tests-for-phpunit.data-providers"/>.
    </para>
  </section>

  <section id="appendixes.annotations.depends">
    <title><literal>@depends</literal></title>

    <para>
      <indexterm><primary>@depends</primary></indexterm>

      PHPUnit поддерживает указание зависимостей между методами тестов.
      Зависимости не указывают порядок выполнения методов теста, но они
      позволяют передавать объект с тестовыми данными (фикстурами), созданный
      поставщиком (producer) к потребителям (consumers), котрые от него зависят.
      <xref linkend="writing-tests-for-phpunit.examples.StackTest2.php"/>
      показывает пример использования аннотации <literal>@depends</literal>
      для указания зависимостей между методами теста.
    </para>

    <para>
      Для более детальной информации см. <xref linkend="writing-tests-for-phpunit.test-dependencies"/>
    </para>
  </section>

  <section id="appendixes.annotations.expectedException">
    <title><literal>@expectedException</literal></title>

    <para>
      <indexterm><primary>@expectedException</primary></indexterm>

      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php" />
      показывает пример использования аннотации
      <literal>@expectedException</literal> для тестирования исключений
      (exceptions) в тестируемом коде.
    </para>

    <para>
        Для более детальной информации см.
        <xref linkend="writing-tests-for-phpunit.exceptions"/>
    </para>
  </section>

  <section id="appendixes.annotations.expectedExceptionCode">
    <title><literal>@expectedExceptionCode</literal></title>

    <para>
      <indexterm><primary>@expectedExceptionCode</primary></indexterm>

      Аннотация <literal>@expectedExceptionCode</literal> совместно с аннотацией
      <literal>@expectedException</literal> позволяет указать какой именно код
      исключения следует ожидать.

      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException     MyException
     * @expectedExceptionCode 20
     */
    public function testExceptionHasErrorcode20()
    {
        throw new MyException('Some Message', 20);
    }
}</programlisting>

      Для облегчения тестирования и уменьшения копирования кода можно
      использовать короткий вариант записи с использованием константы в
      <literal>@expectedExceptionCode</literal> используя синтаксис:
      "<literal>@expectedExceptionCode ClassName::CONST</literal>".

      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
      * @expectedException     MyException
      * @expectedExceptionCode MyClass::ERRORCODE
      */
    public function testExceptionHasErrorcode20()
    {
      throw new MyException('Some Message', 20);
    }
}
class MyClass
{
    const ERRORCODE = 20;
}</programlisting>

    </para>

  </section>

  <section id="appendixes.annotations.expectedExceptionMessage">
    <title><literal>@expectedExceptionMessage</literal></title>

    <para>
      <indexterm><primary>@expectedExceptionMessage</primary></indexterm>

      Аннотация <literal>@expectedExceptionMessage</literal> работает по схожему
      принципу с <literal>@expectedExceptionCode</literal> и позволяет
      сделать утверждение (assertion) о сообщении в исключении.

      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException        MyException
     * @expectedExceptionMessage Some Message
     */
    public function testExceptionHasRightMessage()
    {
        throw new MyException('Some Message', 20);
    }
}</programlisting>

      Ожидаемое сообщение может быть подстрокой сообщения исключения.
      Может быть полезным указывать определённое имя или параметр в исключении,
      чтобы не фиксировать полное исключение в коде теста.

      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
     /**
      * @expectedException        MyException
      * @expectedExceptionMessage broken
      */
     public function testExceptionHasRightMessage()
     {
         $param = "broken";
         throw new MyException('Invalid parameter "'.$param.'".', 20);
     }
}</programlisting>

      Для облегчения тестирования и уменьшения копирования кода можно
      использовать короткий вариант записи с использованием константы в
      <literal>@expectedExceptionMessage</literal> используя синтаксис:
      "<literal>@expectedExceptionMessage ClassName::CONST</literal>".

      Пример можно посмотреть в <xref linkend="appendixes.annotations.expectedExceptionCode"/>.
    </para>

  </section>

  <section id="appendixes.annotations.group">
    <title><literal>@group</literal></title>

    <para>
      <indexterm><primary>@group</primary></indexterm>

      Тест можно присвоить какой-либо группе тестов. Можно указывать одну или
      несколько групп одновременно. Пример использования аннотации
      <literal>@group</literal> : <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @group specification
     */
    public function testSomething()
    {
    }

    /**
     * @group regresssion
     * @group bug2204
     */
    public function testSomethingElse()
    {
    }
}</programlisting>
    </para>

    <para>
      Выполняемые группы тестов можно выбрать используя параметры
      <literal>--group</literal> и <literal>--exclude-group</literal>
      при вызове PHPUnit из командной строки, или с помощью конфигурации XML.
    </para>
  </section>

  <section id="appendixes.annotations.outputBuffering">
    <title><literal>@outputBuffering</literal></title>

    <para>
      <indexterm><primary><literal>@outputBuffering</literal></primary></indexterm>

      Аннотация <literal>@outputBuffering</literal> используется для
      <ulink url="http://www.php.net/manual/ru/intro.outcontrol.php">контроля вывода</ulink>
      в PHP <programlisting>/**
 * @outputBuffering enabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    // ...
}</programlisting>
    </para>

    <para>
      <indexterm><primary><literal>@outputBuffering</literal></primary></indexterm>

      Аннотацию <literal>@outputBuffering</literal> также можно использовать на
      уровне методов класса. Это позволяет более точно управлять выводом: <programlisting>/**
 * @outputBuffering disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @outputBuffering enabled
     */
    public function testThatPrintsSomething()
    {
        // ...
    }
}</programlisting>
    </para>
  </section>


  <section id="appendixes.annotations.requires">
    <title><literal>@requires</literal></title>

    <para>
      <indexterm><primary><literal>@requires</literal></primary></indexterm>

      Аннотация <literal>@requires</literal> используется для пропуска тестов,
      когда, например, версия PHP не соответствует используемой.
    </para>

    <para>
      <indexterm><primary><literal>@requires</literal></primary></indexterm>
      Полный список примеров описан в
      <xref linkend="incomplete-and-skipped-tests.requires.tables.api" />
    </para>
  </section>

  <section id="appendixes.annotations.runTestsInSeparateProcesses">
    <title><literal>@runTestsInSeparateProcesses</literal></title>

    <para>
      <indexterm><primary>@runTestsInSeparateProcesses</primary></indexterm>
    </para>

    <programlisting></programlisting>
  </section>

  <section id="appendixes.annotations.runInSeparateProcess">
    <title><literal>@runInSeparateProcess</literal></title>

    <para>
      <indexterm><primary>@runInSeparateProcess</primary></indexterm>
    </para>

    <programlisting></programlisting>
  </section>

  <section id="appendixes.annotations.test">
    <title><literal>@test</literal></title>

    <para>
      <indexterm><primary>@test</primary></indexterm>

      Вместо префиксов <literal>test</literal> к методам, можно использовать
      аннотацию <literal>@test</literal> в DocBlock для пометки метода как
      теста.
      <programlisting>/**
 * @test
 */
public function initialBalanceShouldBe0()
{
    $this->assertEquals(0, $this->ba->getBalance());
}</programlisting>
    </para>
  </section>

  <section id="appendixes.annotations.testdox">
    <title><literal>@testdox</literal></title>

    <para>
      <indexterm><primary>TestDox</primary></indexterm>
      <indexterm><primary>@testdox</primary></indexterm>
    </para>

    <programlisting></programlisting>
  </section>

  <section id="appendixes.annotations.ticket">
    <title><literal>@ticket</literal></title>

    <para>
      <indexterm><primary>@ticket</primary></indexterm>
    </para>

    <programlisting></programlisting>
  </section>
</appendix>
