<?xml version="1.0" encoding="utf-8" ?>

<chapter id="goals">
  <title>Цели PHPUnit</title>

  <para>
    Пока у нас есть только два теста для встроенного типа <literal>array</literal>
    и функции <literal>count()</literal>. Если мы начнём тестирование
    многочисленных функций <literal>array_ *() </literal> которые предоставляет PHP нам придётся
    написать тест для каждой из них. Мы могли бы написать инфраструктуру для
    всех эти тестов с нуля. Однако, гораздо лучше написать один раз тестовую инфраструктуру,
    а затем писать только уникальные части каждого теста.
    PHPUnit как раз и является такой инфраструктурой.
  </para>

  <para>
    Такой фреймворк как PHPUnit должен соответствовать ряду требований, некоторые
    из конторых кажутся противоречивыми. Тесты должны быть одновременно:

    <!-- TODO Find better russian phrase for this
    A framework such as PHPUnit has to resolve a set of constraints, some of
    which seem always to conflict with each other. Simultaneously, tests
    should be: -->
  </para>

  <variablelist>
    <varlistentry>
      <term><emphasis>Простыми в изучении.</emphasis></term>
      <listitem>
        <para>
          Если будет сложно научиться писать тесты, разработчики не будут учиться писать тесты.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Простыми в написании.</emphasis></term>
      <listitem>
        <para>
          Если тесты будут сложными при написании, разработчики не будут их писать.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Легко читаемыми.</emphasis></term>
      <listitem>
        <para>
          Тестовый код не должен содержать дополнительной сложности, так чтобы
          тест сам по себе не потерялся в шуме который его окружает.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Легко выполнимыми.</emphasis></term>
      <listitem>
        <para>
          Тесты должны запускаться по нажатию одной кнопки и представлять
          результат в ясном и недвусмысленном формате.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Быстро выполнимыми.</emphasis></term>
      <listitem>
        <para>
          Тесты должны выполняться быстро чтобы их можно было запускать сотни
          или даже тысячи раз в день.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Изолированными.</emphasis></term>
      <listitem>
        <para>
          Тесты не должны влиять друг на друга. Если порядок запуска тестов
          меняется результат тестов должен оставться неизменным.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Комбинируемыми.</emphasis></term>
      <listitem>
        <para>
          Мы должны иметь возможность запускать совместно любое количество тестов в любых комбинациях.
          Это является естественным следствием изоляции.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    Существуют два основных противоречия между этими требованиями:
  </para>

  <variablelist>
    <varlistentry>
      <term><emphasis>Простота изучения против простоты написания</emphasis></term>
      <listitem>
        <para>
          В основном тесты не требуют всей гибкости языка программирования.
          Многие инструменты тестирования предоставляют свой скриптовый язык
          который включает только минимально необходимые функции для написания тестов.
          В результате тесты становится легко писать и читать т.к. в них нет шума
          который отвлекал бы вас от содержимого самих тестов. Однако,
          изучение еще одного языка программирования и набора инструментов неудобно
          и загромождает ум.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Изоляция простив скорости исполнения.</emphasis></term>
      <listitem>
        <para>
          Если вам нужно чтобы результаты одного теста никак не влияли на результаты
          другого, каждый тест должен запоминать в полном объёме состояние окружения
          до своего начала чтобы вернуть окружение в его оригинальное состояние после
          своего завершения. Однако, восстановление окружения может занять долгое время:
          например, соединение с базой данных и инциализация её в заданном состоянии
          с использованием реалистичных данных.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    PHPUnit пытается разрешить эти конфликты используя PHP как язык тестирования.
    Иногда вся мощь PHP излишня для написания маленьких прямолинейных тестов, но
    используя PHP мы используем весь опыт и инструменты доступные программистам.
    Так как мы пытаемся убедить тестировщиков, которые неохотно пишут тесты, снижение
    барьера для написания первых тестов особенно важно.
  </para>

  <para>
    PHPUnit жертвует скоростью выполнения тестов в пользу изоляции.
    Изолированные тесты важны, потому что они обеспечивают высокое качество обратной связи.
    Вы не получите отчёт с кучей ошибок, только потому что один тест в начале пакета провалился
    и оставил окружение поломанным для остальных тестов. Такая ориентация на изоляцию тестов
    поощряет архитектуру с большим числом простых объектов.
    Каждый объект может быть протестирован быстро в изоляции. Результат -
    лучшая архитектура <emphasis>и</emphasis> более быстрые тесты.
  </para>

  <para>
    PHPUnit предполагает, что большинство тестов успешны и они не стоят подробного
    отчёта. Однако, если тест провален, то этот факт стоит отметить и отчетности.
    Большая часть тестов должны быть упешны и это не стоит комментариев, кроме
    подсчёта количества выполненных тестов. Это предположение встроено в логику
    классов отчётов, но не в ядро PHPUnit. В отчёте о результатах выполнения
    тестов вы видите сколько всего тестов было выполнено, но только для
    проваленных тестов вы увидите детали.
  </para>

  <para>
    Ожидается что тесты "мелкозернисты" и каждый будет тестировать отдельный аспект одного объекта.
    Таким образом, как только тест падает его выполнение прекращается и PHPUnit сообщает о неудаче.
    Умение протестировать [систему] с помощью множества маленьких тестов.
    "Мелкозернистые" тесты улучшают архитектуру системы.
  </para>

  <para>
    Когда вы тестируете объект с помощью PHPUnit вы делаете это используя
    только его публичный интерфейс. Тестирование только публично доступного
    поведения способствует выявлению и решению сложных архитектурных проблем раньше,
    пока последствия плохого дизайна на заразили большую часть системы.
  </para>
</chapter>
