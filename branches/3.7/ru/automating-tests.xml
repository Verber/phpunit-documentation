<?xml version="1.0" encoding="utf-8" ?>

<chapter id="automating-tests">
  <title>Автоматизация Тестирования</title>

  <para>
    Даже хорошие программисты ошибаются. Разница между хорошим и плохим
    программистом в том, что хороший программист использует тесты, чтобы
    обнаружить свои ошибки как можно раньше. Чем раньше вы проверите свой код
    на наличие ошибки тем больше ваши шансы найти её и тем меньше будет стоить
    её поиск и исправление. Это объясняет почему тестирование становится большой
    проблемой если его откладывать до релиза. Большинство ошибок не будут найдены
    совсем, а цена исправления тех, которые были пойманы, будет так высока, что вам
    придётся отобрать (и исправить) только некоторые из них, потому что вы просто
    не сможете себе позволить исправить их все.
  </para>

  <para>
    <indexterm><primary>юнит-тест</primary></indexterm>

    Тестирование с помощью PHPUnit не слишком отличается от того, что
    вы уже, должно быть, делаете. Это всего лишь другой способ делать это.
    Разница между <emphasis>тестированием</emphasis>, то есть, проверкой того,
    что ваша программа ведёт себя так как ожидалось, и <emphasis>выполнением набора
    тестов</emphasis>, выполняемых фрагментов кода, которые автоматически проверяют
    правильность частей (модулей или юнитов) ПО. Эти исполняемые фрагменты кода и
    есть юнит-тесты.
  </para>

  <para>
    В этой главе мы перейдём от простого тестового кода основанного на
    <literal>print</literal>-ах к полностью автоматизированному тесту. Представьте себе
    что вас попросили протестировать встроенный в PHP <literal>array</literal>.
    Одна из частей функциональности, которую нужно протестировать - функция
    <literal>count()</literal>. Для только что созданного массива мы ожидаем что функция
    <literal>count()</literal> вернёт <literal>0</literal>. После добавления одного элемента
    <literal>count()</literal> должна вернуть <literal>1</literal>.
    <xref linkend="automating-tests.examples.array-test.php" /> демонстрирует то что мы
    хотим протестировать.
  </para>

  <example id="automating-tests.examples.array-test.php">
    <title>Тестирование работы с массивами</title>
    <programlisting><![CDATA[<?php
$fixture = array();
// ожидается, что $fixture будет пустой.

$fixture[] = 'element';
// ожидается, что $fixture содержит один элемент
?>]]></programlisting>
  </example>

  <para>
    Самый простой способ проверить что мы получаем в результате то что
    мы ожидали - это распечатать результат <literal>count()</literal> до
    и после добавления элемента (см. <xref linkend="automating-tests.examples.array-test2.php" />).
    Если мы получим <literal>0</literal> а затем <literal>1</literal>,
    <literal>array</literal> и <literal>count()</literal> работают так как ожидалось.
  </para>

  <example id="automating-tests.examples.array-test2.php">
    <title>Используем print для проверки операций с массивами</title>
    <programlisting><![CDATA[<?php
$fixture = array();
print count($fixture) . "\n";

$fixture[] = 'element';
print count($fixture) . "\n";
?>]]></programlisting>
    <screen>0
1</screen>
  </example>

  <para>
    Теперь, нам бы хотелось перейти от тестов, которые требуют интерпретации в ручном режиме,
    к тестам, которые мы сможем запускать автоматически. В <xref linkend="automating-tests.examples.array-test3.php" />
    мы дописали сравнение ожидаемых и реальных значений в тестовом коде и выводим <literal>ok</literal>
    если значения равны. Если мы когда-нибудь увидим сообщение <literal>not ok</literal>,
    мы будем знать что что-то пошло не так
  </para>

  <example id="automating-tests.examples.array-test3.php">
    <title>Сравнение ожидаемого и реального значения для тестирования операций с массивами</title>
    <programlisting><![CDATA[<?php
$fixture = array();
print count($fixture) == 0 ? "ok\n" : "not ok\n";

$fixture[] = 'element';
print count($fixture) == 1 ? "ok\n" : "not ok\n";
?>]]></programlisting>
    <screen>ok
ok</screen>
  </example>

  <para>
    <indexterm><primary>Утверждения - Assertions</primary></indexterm>
    Теперь мы выделим сравнение ожидаемых и полученных значений в функцию,
    которая поднимет исключение когда обнаруживает несоответствие
    (<xref linkend="automating-tests.examples.array-test4.php" />). Это
    даёт нам два преимущества: написание тестов упрощается и мы получаем
    сообщение когда что-то не так.
  </para>

  <example id="automating-tests.examples.array-test4.php">
    <title>Использование функции-утверждения (assertion function) для тестирования операций с массивами</title>
    <programlisting><![CDATA[<?php
$fixture = array();
assertTrue(count($fixture) == 0);

$fixture[] = 'element';
assertTrue(count($fixture) == 1);

function assertTrue($condition)
{
    if (!$condition) {
        throw new Exception('Assertion failed.');
    }
}
?>]]></programlisting>
  </example>

  <para>
    <indexterm><primary>Автоматизированый тест</primary></indexterm>
    Тест теперь полностью автоматизирован. Теперь вместо
    <emphasis>тестирования</emphasis> которое мы выполняли в нашей первой версии,
    в этой версии мы имеем <emphasis>автоматизированый тест</emphasis>.
  </para>

  <para>
    Цель использования автоматических тестов в том чтобы делать меньше ошибок. И хотя
    ваш код всё еще будет несовершенен, даже при отличных тестах, вы скорее всего увидите
    разительное снижение количества дефектов как только вы начнёте автоматизировать тесты.
    Автоматизированные тесты дают вам обоснованную уверенность в коде. Вы можете использовать
    эту уверенность для того, чтобы предпринимать более смелые шаги в дизайне (Рефакторинг),
    лучше работать с товарищами по команде (Командное Тестирование [Cross-Team Tests]),
    улучшить отношения с вашими клиентами, и каждый раз вечером уходить домой с уверенностью
    что система стала лучше чем она была утром благодаря вашим усилиям.
  </para>
</chapter>
