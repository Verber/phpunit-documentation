<?xml version="1.0" encoding="utf-8" ?>

<chapter id="database">
  <title>Database Testing</title>

  <caution>
    <para>
      You are looking at the documentation for a version of PHPUnit that is no
      longer supported.
    </para>

    <para>
      The documentation for the current version of PHPUnit can be found
      <ulink url="../../current/en/index.html">here</ulink>.
    </para>
  </caution>

  <para>
    <indexterm><primary>Database</primary></indexterm>
    <indexterm><primary>DbUnit</primary></indexterm>

    While creating tests for your software you may come across database code
    that needs to be unit tested. The database extension has been created to
    provide an easy way to place your database in a known state, execute your
    database-effecting code, and ensure that the expected data is found in the
    database.
  </para>

  <para>
    The quickest way to create a new Database Unit Test is to extend the
    <literal>PHPUnit_Extensions_Database_TestCase</literal> class. This class
    provides the functionality to create a database connection, seed your
    database with data, and after executing a test comparing the contents of
    your database with a dataset that can be built in a variety of formats. In
    <xref linkend="database.examples.DatabaseTestSetup.php" /> you can see
    examples of <literal>getConnection()</literal> and <literal>getDataSet()
    </literal> implementations.
  </para>

  <example id="database.examples.DatabaseTestSetup.php">
    <title>Setting up a database test case</title>
    <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/Database/TestCase.php';

class DatabaseTest extends PHPUnit_Extensions_Database_TestCase
{
    protected function getConnection()
    {
        $pdo = new PDO('mysql:host=localhost;dbname=testdb', 'root', '');
        return $this->createDefaultDBConnection($pdo, 'testdb');
    }

    protected function getDataSet()
    {
        return $this->createFlatXMLDataSet(dirname(__FILE__).'/_files/bank-account-seed.xml');
    }
}
?>]]></programlisting>
  </example>

  <para>
    The <literal>getConnection()</literal> method must return an
    implementation of the <literal>PHPUnit_Extensions_Database_DB_IDatabaseConnection</literal>
    interface. The <literal>createDefaultDBConnection()</literal> method can
    be used to return a database connection. It accepts a <literal>PDO</literal>
    object as the first parameter and the name of the schema you are testing
    against as the second parameter.
  </para>

  <para>
    The <literal>getDataSet()</literal> method must return an implementation of
    the <literal>PHPUnit_Extensions_Database_DataSet_IDataSet</literal>
    interface. There are currently three different data sets available in
    PHPUnit. These datasets are discussed in <xref linkend="database.datasets" />
  </para>

  <table id="database.tables.testcase.api">
    <title>Database Test Case Methods</title>

    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <thead>
        <row>
	  <entry>Method</entry>
	  <entry>Meaning</entry>
	</row>
      </thead>
      <tbody>
        <row>
	  <entry><literal>PHPUnit_Extensions_Database_DB_IDatabaseConnection getConnection()</literal></entry>
	  <entry>Implement to return the database connection that will be checked for expected data sets and tables.</entry>
	</row>
	<row>
	  <entry><literal>PHPUnit_Extensions_Database_DataSet_IDataSet getDataSet()</literal></entry>
	  <entry>Implement to return the data set that will be used in in database set up and tear down operations.</entry>
	</row>
	<row>
	  <entry><literal>PHPUnit_Extensions_Database_Operation_DatabaseOperation getSetUpOperation()</literal></entry>
	  <entry>Override to return a specific operation that should be performed on the test database at the beginning of each test. The various operations are detailed in <xref linkend="database.operations" />.</entry>
	</row>
	<row>
	  <entry><literal>PHPUnit_Extensions_Database_Operation_DatabaseOperation getTearDownOperation()</literal></entry>
	  <entry>Override to return a specific operation that should be performed on the test database at the end of each test. The various operations are detailed in <xref linkend="database.operations" />.</entry>
	</row>
	<row>
	  <entry><literal>PHPUnit_Extensions_Database_DB_DefaultDatabaseConnection createDefaultDBConnection(PDO $connection, string $schema)</literal></entry>
	  <entry>Return a database connection wrapper around the <literal>$connection</literal> <literal>PDO</literal> object. The database schema being tested against should be specified by <literal>$schema</literal>. The result of this method can be returned from <literal>getConnection()</literal>.</entry>
	</row>
	<row>
	  <entry><literal>PHPUnit_Extensions_Database_DataSet_FlatXmlDataSet createFlatXMLDataSet(string $xmlFile)</literal></entry>
	  <entry>Returns a flat xml dataset that is created from the xml file located at the absolute path specified in <literal>$xmlFile</literal>. More details about flat xml files can be found in <xref linkend="database.datasets.flatxml" />. The result of this method can be returned from <literal>getDataSet()</literal>.</entry>
	</row>
	<row>
	  <entry><literal>PHPUnit_Extensions_Database_DataSet_XmlDataSet createXMLDataSet(string $xmlFile)</literal></entry>
	  <entry>Returns a xml dataset that is created from the xml file located at the absolute path specified in <literal>$xmlFile</literal>. More details about xml files can be found in <xref linkend="database.datasets.xml" />. The result of this method can be returned from <literal>getDataSet()</literal>.</entry>
	</row>
	<row>
	  <entry><literal>void assertTablesEqual(PHPUnit_Extensions_Database_DataSet_ITable $expected, PHPUnit_Extensions_Database_DataSet_ITable $actual)</literal></entry>
	  <entry>Reports an error if the contents of the <literal>$expected</literal> table do not match the contents in the <literal>$actual</literal> table.</entry>
	</row>
	<row>
	  <entry><literal>void assertDataSetsEqual(PHPUnit_Extensions_Database_DataSet_IDataSet $expected, PHPUnit_Extensions_Database_DataSet_IDataSet $actual)</literal></entry>
	  <entry>Reports an error if the contents of the <literal>$expected</literal> data set do not match the contents in the <literal>$actual</literal> data set.</entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <section id="database.datasets">
    <title>Datasets</title>

    <para>
      ...
    </para>

    <section id="database.datasets.flatxml">
      <title>Flat XML Data Set</title>
      <para>
        ...
      </para>
    </section>

    <section id="database.datasets.xml">
      <title>XML Data Set</title>
      <para>
        ...
      </para>
    </section>

  </section>

  <section id="database.operations">
    <title>Operations</title>

    <para>
      ...
    </para>

  </section>

  <section id="database.bestpractices">
    <title>Database Testing Best Practices</title>

    <para>
      ...
    </para>

  </section>
</chapter>
