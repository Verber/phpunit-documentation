<?xml version="1.0" encoding="utf-8" ?>

<chapter id="behaviour-driven-development">
  <title>Behaviour-Driven Development (Разработка через поведение, BDD)</title>

  <para>
    <indexterm><primary>Экстремальное программирование</primary></indexterm>
    <indexterm><primary>BDD</primary></indexterm>

    В <xref linkend="Astels2006" />, Дейв Астелс (Dave Astels) отметил:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        В <ulink url="http://ru.wikipedia.org/wiki/%D0%AD%D0%BA%D1%81%D1%82%D1%80%D0%B5%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">экстремальном программировании</ulink>
        изначально было правило, тестировать всё что может сломаться.
      </para>
    </listitem>
    <listitem>
      <para>
        Сейчас, однако, практики тестирования в экстремальном программировании эволюционировали
        в  <ulink url="https://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0_%D1%87%D0%B5%D1%80%D0%B5%D0%B7_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">разработку через тестирование</ulink>
        (см. <xref linkend="test-driven-development" />).
      </para>
    </listitem>
    <listitem>
      <para>
        Но инструменты до сих пор заставляют разработчиков думать в терминах
        тестов и утверждений вместо спецификаций.
      </para>
    </listitem>
  </itemizedlist>

  <blockquote>
    <attribution>Дейв Астелс (Dave Astels)</attribution>
    <title>Итак, если речь не о тестировании, то о чём?</title>
    <para>
      Речь идёт выяснении, что вы пытаетесь сделать, прежде чем строчить что-то
      наполовину готовое что пытается сделать это. Вы пишете спецификацию, которая закрепляет
      небольшой аспект поведения в краткой, однозначной, и исполняемой форме.
      Это так просто. Означает ли, что вы пишете тесты? Нет, это означает, что
      вы пишете спецификации того, что ваш код будет делать. Это означает, что вы
      указываете поведение вашего кода загодя. Но не слишком далеко вперед. На самом деле,
      вы делаете это непосредственно перед тем как писать код, потому что в этот момент у вас есть максимум
      информации под рукой. Как и при правильном TDD, вы работаете крошечными шагами ...
      указав один маленький аспект поведения, тут же его реализуете.
    </para>
    <para>
      Когда вы поймёте что речь об спецификации поведения а не о написании тестов
      ваша точка зрения изменится. Внезапно идея наличия тестового класса для каждого
      вашего класса станет нелепо ограничивающей. И мысль о тестировании каждого
      из ваших методов его собственным тестом (в соотношении 1-к-1) будет смехотворной.
    </para>
  </blockquote>

  <para>
    <indexterm><primary>BDD</primary></indexterm>
    <indexterm><primary>Проблемно-ориентированное проектирование</primary></indexterm>
    В центре внимания <ulink url="http://en.wikipedia.org/wiki/Behavior-driven_development">разработки через поведение</ulink>
    "язык и взаимодействия используемые в процессе разработки программного обеспечения".
    Разработчики, которые программируют от поведения, используют свой естественный язык
    в сочетании с общеупотребительном языком
    <ulink url="http://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%B1%D0%BB%D0%B5%D0%BC%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">проблемно-ориентированного проектирования</ulink>
    для того чтобы описать назначение и смысл своего кода. Это позволяет разработчикам
    сконцентрироваться больше на том зачем код должен быть создан, чем на технических деталях,
    а так же минимизировать перевод с технического языка, на котором написан код, на язык
    предметной области, на котором говорят эксперты в этой области.
  </para>

  <para>
    <indexterm><primary><literal>PHPUnit_Extensions_Story_TestCase</literal></primary></indexterm>

    The <literal>PHPUnit_Extensions_Story_TestCase</literal> class adds a story
    framework that faciliates the definition of a
    <ulink url="http://en.wikipedia.org/wiki/Domain-specific_programming_language">Domain-Specific Language</ulink>
    for Behaviour-Driven Development. It can be installed like this:
  </para>

  <screen><userinput>pear install phpunit/PHPUnit_Story</userinput></screen>

  <para>
    Inside a <emphasis>scenario</emphasis>, <literal>given()</literal>,
    <literal>when()</literal>, and <literal>then()</literal> each represent a
    <emphasis>step</emphasis>. <literal>and()</literal> is the same kind as the
    previous step. The following methods are declared <literal>abstract</literal>
    in <literal>PHPUnit_Extensions_Story_TestCase</literal> and need to be
    implemented:
  </para>

  <itemizedlist>
    <listitem>
      <para><literal>runGiven(&amp;$world, $action, $arguments)</literal></para>
      <para>...</para>
    </listitem>

    <listitem>
      <para><literal>runWhen(&amp;$world, $action, $arguments)</literal></para>
      <para>...</para>
    </listitem>

    <listitem>
      <para><literal>runThen(&amp;$world, $action, $arguments)</literal></para>
      <para>...</para>
    </listitem>
  </itemizedlist>

  <section id="behaviour-driven-development.bowlinggame-example">
    <title>BowlingGame Example</title>

    <para>
      In this section, we will look at the example of a class that calculates
      the score for a game of bowling. The rules for this are as follows:
    </para>

    <itemizedlist>
      <listitem>
        <para>The game consists of 10 frames.</para>
      </listitem>
      <listitem>
        <para>In each frame the player has two opportunities to knock down 10 pins.</para>
      </listitem>
      <listitem>
        <para>The score for a frame is the total number of pins knocked down, plus bonuses for strikes and spares.</para>
      </listitem>
      <listitem>
        <para>A spare is when the player knocks down all 10 pins in two tries.</para>
        <para>The bonus for that frame is the number of pins knocked down by the next roll.</para>
      </listitem>
      <listitem>
        <para>A strike is when the player knocks down all 10 pins on his first try.</para>
        <para>The bonus for that frame is the value of the next two balls rolled.</para>
      </listitem>
    </itemizedlist>

    <para>
      <xref linkend="behaviour-driven-development.bowlinggame-example.examples.BowlingGameSpec.php" />
      shows how the above rules can be written down as specification scenarios
      using <literal>PHPUnit_Extensions_Story_TestCase</literal>.
    </para>

    <example id="behaviour-driven-development.bowlinggame-example.examples.BowlingGameSpec.php">
      <title>Specification for the BowlingGame class</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/Story/TestCase.php';
require_once 'BowlingGame.php';

class BowlingGameSpec extends PHPUnit_Extensions_Story_TestCase
{
    /**
     * @scenario
     */
    public function scoreForGutterGameIs0()
    {
        $this->given('New game')
             ->then('Score should be', 0);
    }

    /**
     * @scenario
     */
    public function scoreForAllOnesIs20()
    {
        $this->given('New game')
             ->when('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->and('Player rolls', 1)
             ->then('Score should be', 20);
    }

    /**
     * @scenario
     */
    public function scoreForOneSpareAnd3Is16()
    {
        $this->given('New game')
             ->when('Player rolls', 5)
             ->and('Player rolls', 5)
             ->and('Player rolls', 3)
             ->then('Score should be', 16);
    }

    /**
     * @scenario
     */
    public function scoreForOneStrikeAnd3And4Is24()
    {
        $this->given('New game')
             ->when('Player rolls', 10)
             ->and('Player rolls', 3)
             ->and('Player rolls', 4)
             ->then('Score should be', 24);
    }

    /**
     * @scenario
     */
    public function scoreForPerfectGameIs300()
    {
        $this->given('New game')
             ->when('Player rolls', 10)
             ->and('Player rolls', 10)
             ->and('Player rolls', 10)
             ->and('Player rolls', 10)
             ->and('Player rolls', 10)
             ->and('Player rolls', 10)
             ->and('Player rolls', 10)
             ->and('Player rolls', 10)
             ->and('Player rolls', 10)
             ->and('Player rolls', 10)
             ->and('Player rolls', 10)
             ->and('Player rolls', 10)
             ->then('Score should be', 300);
    }

    public function runGiven(&$world, $action, $arguments)
    {
        switch($action) {
            case 'New game': {
                $world['game']  = new BowlingGame;
                $world['rolls'] = 0;
            }
            break;

            default: {
                return $this->notImplemented($action);
            }
        }
    }

    public function runWhen(&$world, $action, $arguments)
    {
        switch($action) {
            case 'Player rolls': {
                $world['game']->roll($arguments[0]);
                $world['rolls']++;
            }
            break;

            default: {
                return $this->notImplemented($action);
            }
        }
    }

    public function runThen(&$world, $action, $arguments)
    {
        switch($action) {
            case 'Score should be': {
                for ($i = $world['rolls']; $i < 20; $i++) {
                    $world['game']->roll(0);
                }

                $this->assertEquals($arguments[0], $world['game']->score());
            }
            break;

            default: {
                return $this->notImplemented($action);
            }
        }
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit --printer PHPUnit_Extensions_Story_ResultPrinter_Text BowlingGameSpec</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

BowlingGameSpec
 [x] Score for gutter game is 0

   Given New game 
    Then Score should be 0

 [x] Score for all ones is 20

   Given New game 
    When Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
     and Player rolls 1
    Then Score should be 20

 [x] Score for one spare and 3 is 16

   Given New game 
    When Player rolls 5
     and Player rolls 5
     and Player rolls 3
    Then Score should be 16

 [x] Score for one strike and 3 and 4 is 24

   Given New game 
    When Player rolls 10
     and Player rolls 3
     and Player rolls 4
    Then Score should be 24

 [x] Score for perfect game is 300

   Given New game 
    When Player rolls 10
     and Player rolls 10
     and Player rolls 10
     and Player rolls 10
     and Player rolls 10
     and Player rolls 10
     and Player rolls 10
     and Player rolls 10
     and Player rolls 10
     and Player rolls 10
     and Player rolls 10
     and Player rolls 10
    Then Score should be 300

Scenarios: 5, Failed: 0, Skipped: 0, Incomplete: 0.</screen>
    </example>
  </section>
</chapter>
